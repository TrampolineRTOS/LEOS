abstract class @expression { @location loc }
class @validNode        : @expression { @lstring identifier }
class @emptyNode        : @expression { @lstringlist identifier }
abstract class @uniNode : @expression { @expression expressionValue }
abstract class @binNode : @expression { @expression left @expression right }
class @functionCallNode : @expression { @lstring funcName @expressionList arguments }
class @integerNode      : @expression { @luint64 integerValue }
class @boolNode         : @expression { @lbool boolValue }
class @identifierNode   : @expression { @lstringlist identifierValue }
class @minNode, @maxNode : @expression { @lstringlist field @lstringlist container }
class @subExprNode      : @uniNode {}
class @notNode          : @uniNode {}
class @compNode         : @uniNode {}
class @equalNode        : @binNode {}
class @differNode       : @binNode {}
class @lowerEqualNode   : @binNode {}
class @greaterEqualNode : @binNode {}
class @lowerNode        : @binNode {}
class @greaterNode      : @binNode {}
class @andNode          : @binNode {}
class @orNode           : @binNode {}
class @xorNode          : @binNode {}
class @shiftLeftNode    : @binNode {}
class @shiftRightNode   : @binNode {}
class @andAndNode       : @binNode {}
class @orOrNode         : @binNode {}
class @addNode          : @binNode {}
class @subNode          : @binNode {}
class @mulNode          : @binNode {}
class @divNode          : @binNode {}
class @remainNode       : @binNode {}

list @expressionList {
  @expression exp
}
#------------------------------------------------------------------------------#
#                       Model generation from leos                             #      
#------------------------------------------------------------------------------#

class @automatonNode {
  @string name 
}

class @automatonTransition{
  @automatonNode source 
  @automatonNode target
  @string guard
  @string synchronisation
  @string assignment 
}

list @automatonNodeList { 
  @automatonNode node
}

list @automatonTransitionList {
  @automatonTransition transition %setter
}

class @automaton {
  @string name
  @automatonNode initNode
  @automatonNodeList nodeList
  @automatonTransitionList transitionList
}

getter @automaton getAutomatonName 
    -> @string result 
{
   result = name
}

setter @automaton setAutomatonName 
   ?@string newName 
{
   name = newName
} 

setter @automaton setAutoNodeList
   ?@automatonNodeList newNodeList
{
   nodeList = newNodeList
}

setter @automaton setAutoTransList
   ?@automatonTransitionList newTransList
{
   transitionList = newTransList
}

setter @automaton addAutoNodeList
   ?@automatonNodeList newNodeList
{
   nodeList += newNodeList
}

setter @automaton addAutoTransList
   ?@automatonTransitionList newTransList
{
   @uint64 transitionListLength = [transitionList length]
   log transitionListLength
   if transitionListLength > 0 then 
      @automatonTransition firstTransitionOfNewTransList
      @automatonTransition lastTransitionOftransitionList
      [newTransList first ?firstTransitionOfNewTransList]
      [transitionList last ?lastTransitionOftransitionList]
      @automatonNode sourceNode = [firstTransitionOfNewTransList getTransitionSource]
      @automatonNode TargetNode = [lastTransitionOftransitionList getTransitionTarget]
      [!?lastTransitionOftransitionList setTransitionTarget !sourceNode]
      [!?transitionList setTransitionAtIndex !lastTransitionOftransitionList !transitionListLength-1]
   end 
   transitionList += newTransList
}

setter @automatonTransition setTransitionTarget
   ?@automatonNode Newnode
{
  target = Newnode
}

setter @automatonTransition setTransitionSource
   ?@automatonNode Newnode
{
  source = Newnode
}

getter @automatonTransition getTransitionTarget
   ->@automatonNode result
{
  result = target
}

getter @automatonTransition getTransitionSource
   ->@automatonNode result
{
  result = source
}


List @automatonList {
  @automaton automaton
}

getter @schedulerDeclaration allMethods  
  -> @methodDeclarationMap result 
{
  result = self.methods 
}

getter @methodDeclaration methodName
   -> @lstring result
{
  result = self.name 
}

getter @methodDeclaration argList 
   -> @argumentList result 
{
   result = self.arguments
}

getter @methodDeclaration localMap
   -> @varDeclarationMap result 
{
   result = self.locals
}

getter @methodDeclaration statmtList
   -> @statementList result 
{
   result = self.statements
}


getter @methodDeclaration argName
    ?let @argumentList arglist
    -> @lstringlist result  
{
  result = .emptyList
  for () in arglist do 
   result += !name
  end
}

#------------------------------------------------------------------------------#
# automaton state and transition creation from a statement 
#------------------------------------------------------------------------------#

#------------ sdmlExpression getter (object to string convertin) --------------#
getter @sdmlExpression objToString
  ->@string result 
{
   error .here: "the @sdmExpression expressionType is not defined": result
}

getter @sdmlExpression getIfExprLocation
  ->@location result 
  {
     result = loc
  }

override getter @sdmlIntegerNode objToString
  ->@string result 
{
   result = [integerValue string]
}

override getter @sdmlBoolNode objToString
  ->@string result 
{
   result = [boolValue cString]
}

override getter @sdmlIdentifierNode objToString
  ->@string result
{
   result = [identifierValue string]
}

override getter @sdmlEqualNode objToString 
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "==" + rightExpString
}

override getter @sdmlDifferNode objToString 
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "!=" + rightExpString
}

override getter @sdmlLowerEqualNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "<=" + rightExpString
}


override getter @sdmlGreaterEqualNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + ">=" + rightExpString
}

override getter @sdmlLowerNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "<" + rightExpString
}

override getter @sdmlGreaterNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + ">" + rightExpString
   
}

override getter @sdmlAndNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "&" + rightExpString
}

override getter @sdmlOrNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "|" + rightExpString
}

override getter @sdmlXorNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "^" + rightExpString
}

override getter @sdmlShiftLeftNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "<<" + rightExpString
}

override getter @sdmlShiftRightNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + ">>" + rightExpString
}

override getter @sdmlAndAndNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "&&" + rightExpString
}

override getter @sdmlOrOrNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "||" + rightExpString
}

override getter @sdmlAddNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "+" + rightExpString
}

override getter @sdmlSubNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "-" + rightExpString
}

override getter @sdmlMulNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "*" + rightExpString
}

override getter @sdmlDivNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "/" + rightExpString
}

override getter @sdmlRemainNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "%" + rightExpString
}

#override getter @sdmlFunctionCallNode objToString
#  ->@string result
#{
#  
#}


#--------- Method for states and transitions creation from statements ---------#

method @statement  statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
 error .here: "the @statement sdmlStatement is not defined":nodeList
 error .here : "toto":transitList
}

override method @moveFrontStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{ 
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string destinationString = [destination string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}  
   @automatonTransition trans = @automatonTransition.new {!nod !null  !" " !" "  !ident + "->" + destinationString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter
}


override method @moveBackStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string sourceString = [source string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !sourceString + "<-" + ident}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter
}

override method @assignExpressionStatement statementToAutomaton
    ?let @os  os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "=" + expString}
   nodeList += !nod
   transitList += !trans

   
   #Encore des lignes de codes Ã  ajouter
}


override method @assignAddStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

  @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "+=" + expString}
   nodeList += !nod
   transitList += !trans

   
   #Encore des lignes de codes Ã  ajouter
}

override method @assignSubStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""} 
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "-=" + expString}
   nodeList += !nod
   transitList += !trans

   
   #Encore des lignes de codes Ã  ajouter
}

override method @assignMulStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""} 
   @automatonNode nod = @automatonNode.new{!locString}  
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "*=" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter
}

override method @assignDivStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""} 
   @automatonNode nod = @automatonNode.new{!locString} 
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "/=" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter
}

override method @assignRemainStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}   
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "%=" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter
}


override method @assignAndStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}   
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "&=" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter
}

override method @assignOrStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "|=" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter
}

override method @assignShiftLeftStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""} 
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "<<" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter
}

override method @assignShiftRightStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + ">>" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter
}


override method @assignIncStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString} 
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "++"}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter
}


override method @assignDecStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString} 
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "--"}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter
}


override method @functionCallStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{

   @string functionName = [funcName string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   nodeList = .emptyList
   transitList = .emptyList
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new{!nod !null !" " !functionName +"(" + ")"  !""} # Ã  complÃ©ter
   nodeList += !nod
   transitList += !trans
   #Encore des lignes de codes Ã  ajouter
}

override method @ifStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{   
    @automatonTransitionList thenTransList = .emptyList
    @automatonTransitionList elseTransList = .emptyList
    @automatonNodeList thenNodList = .emptyList
    @automatonNodeList elseNodList = .emptyList
    @automatonNodeList nodList = .emptyList
    @automatonTransitionList transList = .emptyList
    @automatonTransition lastTransition
    @uint64 count = 0
    
    nodeList = .emptyList
    transitList = .emptyList
    
    @sdmlExpression ifCondition = [condition sdmlExpression !os]
    @location ifLocation = [ifCondition getIfExprLocation]
    @string ifLocString = [ifLocation line]
    @string ifConditionString = [ifCondition objToString]
    @string endIfLocString = [loc line]
    @automatonNode null = @automatonNode.new{!""}
    @automatonNode ifNod = @automatonNode.new{!ifLocString}
    @automatonNode endIfNode = @automatonNode.new{!endIfLocString}
    nodeList += !ifNod
    nodeList += !endIfNode
    @automatonTransition trans = @automatonTransition.new {!ifNod !null !ifConditionString !""  !""} # Ã  complÃ©ter 
    thenTransList += !trans
    trans = @automatonTransition.new {!ifNod !null !"!"+ifConditionString !"" !""} # Ã  complÃ©ter
    elseTransList += !trans

    for () in trueStatements do
     [statement statementToAutomaton !os ?nodList ?transList]
     thenNodList += nodList
     thenTransList += transList
     count++    
    end
    [!?thenTransList linkStateTransition]
    nodeList += thenNodList
    
    [thenTransList last ?lastTransition]
    [!?lastTransition setTransitionTarget !endIfNode]
    [!?thenTransList setTransitionAtIndex !lastTransition !count]
    
    transitList += thenTransList
    
    count = 0
    for () in falseStatements do
     [statement statementToAutomaton !os ?nodList ?transList]
     elseNodList += nodList
     elseTransList += transList
     count++    
    end
    [!?elseTransList linkStateTransition]
    nodeList += elseNodList
    
    [elseTransList last ?lastTransition]
    [!?lastTransition setTransitionTarget !endIfNode]
    [!?elseTransList setTransitionAtIndex !lastTransition !count]
    transitList += elseTransList

    #Encore des lignes de codes Ã  ajouter
}


override method @moveOutStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{   
   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string nextStateString = [nextState string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new{!nod !null !" " !" "  !"[" + nextStateString + "]" + "<-" + ident}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes Ã  ajouter

}

method @methodDeclaration methodToAutomaton
    ?let @os os
    ?!@automaton automaTon
{   
    @automatonTransitionList tList = .emptyList
    @automatonNodeList nList = .emptyList
    @automaton automaT = @automaton.new{!"" !@automatonNode.new{!""} !.emptyList !.emptyList}
    automaTon = automaT
    [!?automaTon setAutomatonName ![name string]]
    for () in statements do 
      [statement statementToAutomaton !os ?nList ?tList]
      [!?automaTon addAutoNodeList !nList] #automaTon.nodeList += nList
      [!?automaTon addAutoTransList !tList] #automaTon.transitionList += tList
    end
    #Encore du code Ã  ajouter
}

method @schedulerDeclaration methodsToAutomatonList
    ?let @os os
    ?!@automatonList automaTonList
{
     @automaton automaT = @automaton.new{!"" !@automatonNode.new{!""} !.emptyList !.emptyList}
     for () in methods do
       [methodDeclaration methodToAutomaton !os !?automaT]
       [!?automaT finalizeAutomatonConstruction]
       automaTonList += !automaT
     end
     #Encore du code Ã  ajouter
}

#this function allows to link each automaton state and transition 

setter @automatonTransitionList linkStateTransition
{
  @uint64 i = 0
  @uint64 transitionListLength = [self length]
  if transitionListLength > 0 then 
     for i in @range.new{!0 !transitionListLength-1} do 
#        log i
        @automatonTransition t_1 = [self  transitionAtIndex !i]
#        log t_1
        @automatonTransition t_2 = [self  transitionAtIndex !i+1]
#        log t_2
        @automatonNode sourceNode = [t_2 getTransitionSource]
        @automatonNode t_1Target = [t_1 getTransitionTarget]
        @automatonNode null = @automatonNode.new{!""}
        if t_1Target == null then
          [!?t_1 setTransitionTarget !sourceNode] # t_1.target = t_2.source
          [!?self setTransitionAtIndex !t_1 !i]
        end
     end 
  end 
}

setter @automaton finalizeAutomatonConstruction #?! @automaton unused automaTon
{

  @automatonNode initialTransitionTarget
  [nodeList first ?initialTransitionTarget]

  initNode = @automatonNode.new{!"initial_"+name}
  [!?nodeList insertAtIndex !initNode !0]
  
  @automatonTransition initialTransition = @automatonTransition.new{!initNode !initialTransitionTarget !"" !name + "?"  !""}
  [!?transitionList insertAtIndex !initialTransition !0]

  @automatonTransition finalTransition = @automatonTransition.new{!initNode !initNode !"" !"" !""}
#  [!?transitionList insertAtIndex !initialTransition !0]
  
  @automatonTransition lastTransition
  @uint64 transitionListLength = [transitionList length] 
  @automatonNode endNode
  
  [transitionList last ?lastTransition]
  endNode = [lastTransition getTransitionTarget] #lastTransition.target = initNode
  
#  if endNode == @automatonNode.new{!""} then 
#     endNode = @automatonNode.new{!"endState"}
#   [!?lastTransition setTransitionTarget !endNode]
#     log transitionList
#     [!?transitionList setTransitionAtIndex !lastTransition !transitionListLength-1]
#  end
  
  [!?finalTransition setTransitionSource !endNode]  
  [!?transitionList insertAtIndex !finalTransition !transitionListLength]
}

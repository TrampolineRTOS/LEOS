#------------------------------------------------------------------------------#
#                       Model generation from leos                             #      
#------------------------------------------------------------------------------#

abstract class @node {
   @string nodeName
   @string nodeId
}

class @transition {
      @string sourceNode
      @string targetNode
      @string guard
      @string synchronisation
      @string update 
}

class @if_node : @node {
      @transition thenTransition 
      @transition elseTransition
}
 
class @loop_node : @node {
      @transition trueTransition 
      @transition falseTransition
}

class @seq_node : @node {
      @transition outTransition 
}
 
map @if_nodeMap {
    @if_node if_node
    insert insertKey error message "the '%K' key is already declared in %L"
    search searchKey error message "the '%K' key is not defined"
    remove removeKey error message "the '%K' key is not defined"
}

map @loop_nodeMap {
    @loop_node loop_node
    insert insertKey error message "the '%K' key is already declared in %L"
    search searchKey error message "the '%K' key is not defined"
    remove removeKey error message "the '%K' key is not defined"
}

map @seq_nodeMap {
    @seq_node seq_node
    insert insertKey error message "the '%K' key is already declared in %L"
    search searchKey error message "the '%K' key is not defined"
    remove removeKey error message "the '%K' key is not defined"
}

map @transitionMap {
    @transition transition
    insert insertKey error message "the '%K' key is already declared in %L"
    search searchKey error message "the '%K' key is not defined"
    remove removeKey error message "the '%K' key is not defined"
}

class @automaton {
      @lstring name 
      @if_nodeMap ifNodeMap
      @loop_nodeMap loopNodeMap
      @seq_nodeMap seqNodeMap
      @transitionMap transitionMap
}


getter @schedulerDeclaration allMethods  
  -> @methodDeclarationMap result 
{
  result = self.methods 
}

getter @methodDeclaration methodName
   -> @lstring result
{
  result = self.name 
}

getter @methodDeclaration argList 
   -> @argumentList result 
{
   result = self.arguments
}

getter @methodDeclaration localMap
   -> @varDeclarationMap result 
{
   result = self.locals
}

getter @methodDeclaration statmtList
   -> @statementList result 
{
   result = self.statements
}


getter @methodDeclaration argName
    ?let @argumentList arglist
    -> @lstringlist result  
{
  result = .emptyList
  for () in arglist do 
   result += !name
  end
}

#------------------------------------------------------------------------------#
# StatementTypeName 
#------------------------------------------------------------------------------#

getter @statement  statementTypeName
    -> @string result 
{
   error .here: "the @statement statementsType is not defined": result
}

override getter @assignStatement statementTypeName 
    -> @string result
{
   result = "assignStatement"
}

override getter @moveFrontStatement statementTypeName 
    -> @string result 
{
   result = "moveFrontStatement"
}

override getter @moveBackStatement statementTypeName 
    -> @string result 
{
   result = "moveBackStatement"
}

override getter @assignExpressionStatement statementTypeName 
    -> @string result 
{
   result = "assignExpressionStatement"
}


override getter @assignAddStatement statementTypeName 
    -> @string result 
{
   result = "assignAddStatement"
}

override getter @assignSubStatement statementTypeName 
    -> @string result 
{
   result = "assignSubStatement"
}

override getter @assignMulStatement statementTypeName 
    -> @string result 
{
   result = "assignMulStatement"
}

override getter @assignDivStatement statementTypeName 
    -> @string result 
{
   result = "assignDivStatement"
}

override getter @assignRemainStatement statementTypeName 
    -> @string result 
{
   result = "assignRemainStatement"
}

override getter @assignAndStatement statementTypeName 
    -> @string result 
{
   result = "assignAndStatement"
}

override getter @assignOrStatement statementTypeName 
    -> @string result 
{
   result = "assignOrStatement"
}

override getter @assignShiftLeftStatement statementTypeName 
    -> @string result 
{
   result = "assignShiftLeftStatement"
}

override getter @assignShiftRightStatement statementTypeName 
    -> @string result 
{
   result = "assignShiftRightStatement"
}

override getter @assignIncStatement statementTypeName 
    -> @string result 
{
   result = "assignIncStatement"
}

override getter @assignDecStatement statementTypeName 
    -> @string result 
{
   result = "schedulerMethodStatement"
}

override getter @schedulerMethodStatement statementTypeName
    -> @string result 
{
   result = "schedulerMethodStatement"
}

override getter @functionCallStatement statementTypeName 
    -> @string result 
{
   result = "functionCallStatement"
}

override getter @ifStatement statementTypeName
    -> @string result 
{
   result = "ifStatement"
}

override getter @moveStatement statementTypeName
    -> @string result  
{
   result = "moveStatement"
}

override getter @startStatement statementTypeName
    -> @string result 
{
   result = "startStatement"
}

override getter @foreachStatement statementTypeName
    -> @string result 
{
   result = "foreachStatement"
}

override getter @moveeachStatement statementTypeName 
    -> @string result 
{
   result = "moveeachStatement"
}

override getter @moveeacheachStatement statementTypeName 
    -> @string result 
{
   result = "moveeacheachStatement"
}

override getter @moveOutStatement statementTypeName 
    -> @string result 
{
   result = "moveOutStatement"
}

#------------------------------------------------------------------------------#
# automaton state and transition creation from a statement 
#------------------------------------------------------------------------------#

#------------ sdmlExpression getter (object to string convertin) --------------#
getter @sdmlExpression objToString
  ->@string result 
{
   error .here: "the @sdmExpression expressionType is not defined": result
}

override getter @sdmlIntegerNode objToString
  ->@string result 
{
   result = [integerValue string]
}

override getter @sdmlBoolNode objToString
  ->@string result 
{
   result = [boolValue cString]
}

override getter @sdmlIdentifierNode objToString
  ->@string result
{
   result = [identifierValue string]
}

override getter @sdmlEqualNode objToString 
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "==" + rightExpString
}

override getter @sdmlDifferNode objToString 
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "!=" + rightExpString
}

override getter @sdmlLowerEqualNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "<=" + rightExpString
}


override getter @sdmlGreaterEqualNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + ">=" + rightExpString
}

override getter @sdmlLowerNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "<" + rightExpString
}

override getter @sdmlGreaterNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + ">" + rightExpString
}



override getter @sdmlAndNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "&" + rightExpString
}


override getter @sdmlOrNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "|" + rightExpString
}

override getter @sdmlXorNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "^" + rightExpString
}

override getter @sdmlShiftLeftNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "<<" + rightExpString
}

override getter @sdmlShiftRightNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + ">>" + rightExpString
}

override getter @sdmlAndAndNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "&&" + rightExpString
}

override getter @sdmlOrOrNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "||" + rightExpString
}

override getter @sdmlAddNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "+" + rightExpString
}

override getter @sdmlSubNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "-" + rightExpString
}

override getter @sdmlMulNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "*" + rightExpString
}

override getter @sdmlDivNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "/" + rightExpString
}

override getter @sdmlRemainNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "%" + rightExpString
}

#override getter @sdmlFunctionCallNode objToString
#  ->@string result
#{
#  
#}


#--------- Method for states and transitions creation from statements ---------#

method @statement  statementToAutomaton
    ?let @os unused os
    ?!@transition unused transA
    ?!@transition unused tranSB
    ?!@seq_node unused seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
 error .here: "the @statement sdmlStatement is not defined"
}


override method @assignExpressionStatement statementToAutomaton
    ?let @os os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
   @string ident = [identifier string]
   @location locs = loc
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + "=" + expString}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}


override method @assignAddStatement statementToAutomaton
    ?let @os os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
  @string ident = [identifier string]
   @location locs = loc
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + "+=" + expString}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}

override method @assignSubStatement statementToAutomaton
    ?let @os os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
  @string ident = [identifier string]
   @location locs = loc
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + "-=" + expString}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}

override method @assignMulStatement statementToAutomaton
    ?let @os os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
  @string ident = [identifier string]
   @location locs = loc
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + "*=" + expString}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}

override method @assignDivStatement statementToAutomaton
    ?let @os os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
  @string ident = [identifier string]
   @location locs = loc
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + "/=" + expString}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}

override method @assignRemainStatement statementToAutomaton
    ?let @os os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
  @string ident = [identifier string]
   @location locs = loc
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + "%=" + expString}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}


override method @assignAndStatement statementToAutomaton
    ?let @os os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
  @string ident = [identifier string]
   @location locs = loc
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + "&=" + expString}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}

override method @assignOrStatement statementToAutomaton
    ?let @os os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
  @string ident = [identifier string]
   @location locs = loc
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + "|=" + expString}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}

override method @assignShiftLeftStatement statementToAutomaton
    ?let @os os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
  @string ident = [identifier string]
   @location locs = loc
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + "<<" + expString}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}

override method @assignShiftRightStatement statementToAutomaton
    ?let @os os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
  @string ident = [identifier string]
   @location locs = loc
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + ">>" + expString}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}


override method @assignIncStatement statementToAutomaton
    ?let @os unused os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
  @string ident = [identifier string]
   @location locs = loc
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + "++"}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}


override method @assignDecStatement statementToAutomaton
    ?let @os unused os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
  @string ident = [identifier string]
   @location locs = loc
   
   transA = @transition.new {!" " !" " !" " !" "  !ident + "--"}
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}


override method @functionCallStatement statementToAutomaton
    ?let @os unused os
    ?!@transition transA
    ?!@transition unused transB
    ?!@seq_node  seqNode
    ?!@if_node unused ifNode
    ?!@loop_node unused loopNode
{
   @string functionName = [funcName string]
   @location locs = loc
   transA = @transition.new {!" " !" " !" " !functionName +"(" +")"  !""} # à compléter 
   seqNode = @seq_node.new{!" " !" " !transA}
   #Encore des lignes de codes à ajouter
}

override method @ifStatement statementToAutomaton
    ?let @os  os
    ?!@transition transA
    ?!@transition transB
    ?!@seq_node   seqNode
    ?!@if_node    ifNode
    ?!@loop_node  loopNode
{   
    @sdmlExpression ifCondition = [condition sdmlExpression !os]
    @string ifConditionString = [ifCondition objToString]
    
    transA = @transition.new {!" " !" " !ifConditionString !""  !""} # à compléter 
    transB = @transition.new {!" " !" " !"!"+ifConditionString !"" !""} # à compléter
    ifNode = @if_node.new{!" " !"" !transA !transB}
    
    for () in trueStatements do
     [statement statementToAutomaton !os !? transA !? transB !? seqNode !?ifNode !?loopNode]
    end
    
    for () in falseStatements do
      [statement statementToAutomaton !os !? transA !? transB !? seqNode !?ifNode !?loopNode]
    end
    
   #Encore des lignes de codes à ajouter
}


override method @ifStatement statementToAutomaton
    ?let @os  os
    ?!@transition transA
    ?!@transition transB
    ?!@seq_node   seqNode
    ?!@if_node    ifNode
    ?!@loop_node  loopNode
{   

}


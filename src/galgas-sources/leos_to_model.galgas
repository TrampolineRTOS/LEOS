#------------------------------------------------------------------------------#
#                       Model generation from leos                             #      
#------------------------------------------------------------------------------#

class @automatonNode {
  @string name 
}

class @automatonTransition{
  @automatonNode source 
  @automatonNode target
  @string guard
  @string synchronisation
  @string assignment 
}

list @automatonNodeList { 
  @automatonNode node
}

list @automatonTransitionList {
  @automatonTransition transition
}

class @automaton {
  @string name
  @automatonNode initNode
  @automatonNodeList nodeList
  @automatonTransitionList transitionList
}

List @automatonList {
  @automaton automaton
}


#abstract class @node {
# @string nodeName
#   @string nodeId
#}

#class @transition {
#      @string sourceNode
#      @string targetNode
#      @string guard
#      @string synchronisation
#      @string update 
#}

#class @if_node : @node {
#      @transition thenTransition 
#      @transition elseTransition
#}
# 
#class @loop_node : @node {
#      @transition trueTransition 
#      @transition falseTransition
#}
# 
#class automatonNode : @node {
#      @transition outTransition 
#}
# 
#map @if_nodeMap {
#    @if_node if_node
#    insert insertKey error message "the '%K' key is already declared in %L"
#    search searchKey error message "the '%K' key is not defined"
#    remove removeKey error message "the '%K' key is not defined"
#}
# 
#map @loop_nodeMap {
#    @loop_node loop_node
#    insert insertKey error message "the '%K' key is already declared in %L"
#    search searchKey error message "the '%K' key is not defined"
#    remove removeKey error message "the '%K' key is not defined"
#}
# 
#map automatonNodeMap {
#    automatonNode seq_node
#    insert insertKey error message "the '%K' key is already declared in %L"
#    search searchKey error message "the '%K' key is not defined"
#    remove removeKey error message "the '%K' key is not defined"
#}
# 
#map @transitionMap {
#    @transition transition
#    insert insertKey error message "the '%K' key is already declared in %L"
#    search searchKey error message "the '%K' key is not defined"
#    remove removeKey error message "the '%K' key is not defined"
#}
#
#class @automaton {
#      @lstring name 
#      @if_nodeMap nodMap
#      @loop_nodeMap nodMap
#      automatonNodeMap nodMap
#      @transitionMap transitionMap
#}


getter @schedulerDeclaration allMethods  
  -> @methodDeclarationMap result 
{
  result = self.methods 
}

getter @methodDeclaration methodName
   -> @lstring result
{
  result = self.name 
}

getter @methodDeclaration argList 
   -> @argumentList result 
{
   result = self.arguments
}

getter @methodDeclaration localMap
   -> @varDeclarationMap result 
{
   result = self.locals
}

getter @methodDeclaration statmtList
   -> @statementList result 
{
   result = self.statements
}


getter @methodDeclaration argName
    ?let @argumentList arglist
    -> @lstringlist result  
{
  result = .emptyList
  for () in arglist do 
   result += !name
  end
}

#------------------------------------------------------------------------------#
# StatementTypeName 
#------------------------------------------------------------------------------#

getter @statement  statementTypeName
    -> @string result 
{
   error .here: "the @statement statementsType is not defined": result
}

override getter @assignStatement statementTypeName 
    -> @string result
{
   result = "assignStatement"
}

override getter @moveFrontStatement statementTypeName 
    -> @string result 
{
   result = "moveFrontStatement"
}

override getter @moveBackStatement statementTypeName 
    -> @string result 
{
   result = "moveBackStatement"
}

override getter @assignExpressionStatement statementTypeName 
    -> @string result 
{
   result = "assignExpressionStatement"
}


override getter @assignAddStatement statementTypeName 
    -> @string result 
{
   result = "assignAddStatement"
}

override getter @assignSubStatement statementTypeName 
    -> @string result 
{
   result = "assignSubStatement"
}

override getter @assignMulStatement statementTypeName 
    -> @string result 
{
   result = "assignMulStatement"
}

override getter @assignDivStatement statementTypeName 
    -> @string result 
{
   result = "assignDivStatement"
}

override getter @assignRemainStatement statementTypeName 
    -> @string result 
{
   result = "assignRemainStatement"
}

override getter @assignAndStatement statementTypeName 
    -> @string result 
{
   result = "assignAndStatement"
}

override getter @assignOrStatement statementTypeName 
    -> @string result 
{
   result = "assignOrStatement"
}

override getter @assignShiftLeftStatement statementTypeName 
    -> @string result 
{
   result = "assignShiftLeftStatement"
}

override getter @assignShiftRightStatement statementTypeName 
    -> @string result 
{
   result = "assignShiftRightStatement"
}

override getter @assignIncStatement statementTypeName 
    -> @string result 
{
   result = "assignIncStatement"
}

override getter @assignDecStatement statementTypeName 
    -> @string result 
{
   result = "schedulerMethodStatement"
}

override getter @schedulerMethodStatement statementTypeName
    -> @string result 
{
   result = "schedulerMethodStatement"
}

override getter @functionCallStatement statementTypeName 
    -> @string result 
{
   result = "functionCallStatement"
}

override getter @ifStatement statementTypeName
    -> @string result 
{
   result = "ifStatement"
}

#override getter @moveStatement statementTypeName
#    -> @string result  
#{
#   result = "moveStatement"
#}

#override getter @startStatement statementTypeName
#    -> @string result 
#{
#   result = "startStatement"
#}

#override getter @foreachStatement statementTypeName
#    -> @string result 
#{
#   result = "foreachStatement"
#}

#override getter @moveeachStatement statementTypeName 
#    -> @string result 
#{
#   result = "moveeachStatement"
#}

#override getter @moveeacheachStatement statementTypeName 
#    -> @string result 
#{
#   result = "moveeacheachStatement"
#}

#override getter @moveOutStatement statementTypeName 
#    -> @string result 
#{
#   result = "moveOutStatement"
#}

#------------------------------------------------------------------------------#
# automaton state and transition creation from a statement 
#------------------------------------------------------------------------------#

#------------ sdmlExpression getter (object to string convertin) --------------#
getter @sdmlExpression objToString
  ->@string result 
{
   error .here: "the @sdmExpression expressionType is not defined": result
}

override getter @sdmlIntegerNode objToString
  ->@string result 
{
   result = [integerValue string]
}

override getter @sdmlBoolNode objToString
  ->@string result 
{
   result = [boolValue cString]
}

override getter @sdmlIdentifierNode objToString
  ->@string result
{
   result = [identifierValue string]
}

override getter @sdmlEqualNode objToString 
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "==" + rightExpString
}

override getter @sdmlDifferNode objToString 
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "!=" + rightExpString
}

override getter @sdmlLowerEqualNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "<=" + rightExpString
}


override getter @sdmlGreaterEqualNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + ">=" + rightExpString
}

override getter @sdmlLowerNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "<" + rightExpString
}

override getter @sdmlGreaterNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + ">" + rightExpString
}



override getter @sdmlAndNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "&" + rightExpString
}


override getter @sdmlOrNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "|" + rightExpString
}

override getter @sdmlXorNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "^" + rightExpString
}

override getter @sdmlShiftLeftNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "<<" + rightExpString
}

override getter @sdmlShiftRightNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + ">>" + rightExpString
}

override getter @sdmlAndAndNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "&&" + rightExpString
}

override getter @sdmlOrOrNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "||" + rightExpString
}

override getter @sdmlAddNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "+" + rightExpString
}

override getter @sdmlSubNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "-" + rightExpString
}

override getter @sdmlMulNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "*" + rightExpString
}

override getter @sdmlDivNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "/" + rightExpString
}

override getter @sdmlRemainNode objToString
  ->@string result 
{
   @string leftExpString 
   @string rightExpString 
   leftExpString = [left objToString]
   rightExpString = [right objToString]
   result = leftExpString + "%" + rightExpString
}

#override getter @sdmlFunctionCallNode objToString
#  ->@string result
#{
#  
#}


#--------- Method for states and transitions creation from statements ---------#

method @statement  statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
 error .here: "the @statement sdmlStatement is not defined":nodeList
 error .here : "toto":transitList
}

override method @moveFrontStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{ 
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string destinationString = [destination string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}  
   @automatonTransition trans = @automatonTransition.new {!nod !null  !" " !" "  !ident + "->" + destinationString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter
}


override method @moveBackStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string sourceString = [source string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !sourceString + "<-" + ident}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter
}

override method @assignExpressionStatement statementToAutomaton
    ?let @os  os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "=" + expString}
   nodeList += !nod
   transitList += !trans

   
   #Encore des lignes de codes à ajouter
}


override method @assignAddStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

  @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "+=" + expString}
   nodeList += !nod
   transitList += !trans

   
   #Encore des lignes de codes à ajouter
}

override method @assignSubStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""} 
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "-=" + expString}
   nodeList += !nod
   transitList += !trans

   
   #Encore des lignes de codes à ajouter
}

override method @assignMulStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""} 
   @automatonNode nod = @automatonNode.new{!locString}  
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "*=" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter
}

override method @assignDivStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""} 
   @automatonNode nod = @automatonNode.new{!locString} 
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "/=" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter
}

override method @assignRemainStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}   
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "%=" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter
}


override method @assignAndStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList

   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}   
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "&=" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter
}

override method @assignOrStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "|=" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter
}

override method @assignShiftLeftStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""} 
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "<<" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter
}

override method @assignShiftRightStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string locString = [loc line]
   @sdmlExpression exp
   exp = [rightValue sdmlExpression !os]  
   @string expString
   expString = [exp objToString]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + ">>" + expString}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter
}


override method @assignIncStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString} 
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "++"}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter
}


override method @assignDecStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{
   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString} 
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !ident + "--"}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter
}


override method @functionCallStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{

   @string functionName = [funcName string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   nodeList = .emptyList
   transitList = .emptyList
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new{!nod !null !" " !functionName +"(" + ")"  !""} # à compléter
   nodeList += !nod
   transitList += !trans
   #Encore des lignes de codes à ajouter
}

override method @ifStatement statementToAutomaton
    ?let @os os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{   
    @automatonTransitionList thenTransList = .emptyList
    @automatonTransitionList elseTransList = .emptyList
    @automatonNodeList thenNodList = .emptyList
    @automatonNodeList elseNodList = .emptyList
    @automatonNodeList nodList = .emptyList
    @automatonTransitionList transList = .emptyList
    @uint64 count = 1
    nodeList = .emptyList
    transitList = .emptyList
    
    @sdmlExpression ifCondition = [condition sdmlExpression !os]
    @string ifConditionString = [ifCondition objToString]
    @string locString = [loc line]
    @automatonNode null = @automatonNode.new{!""}
    @automatonNode nod = @automatonNode.new{!locString}
    @automatonTransition trans = @automatonTransition.new {!nod !null !ifConditionString !""  !""} # à compléter 
    thenTransList += !trans
    trans = @automatonTransition.new {!nod !null !"!"+ifConditionString !"" !""} # à compléter
    elseTransList += !trans

    for () in trueStatements do
     [statement statementToAutomaton !os ?nodList ?transList]
     thenNodList += nodList
     thenTransList += transList
     if count > 0 then 
       @automatonTransition t_1 = [thenTransList  transitionAtIndex !count]
       @automatonTransition t_2 = [thenTransList  transitionAtIndex !count-1]
       t_2.target = t_1.source
       [!?thenTransList insertAtIndex !t_2 !count-1]
     end 
#     if count == [trueStatements length]
#       @automatonTransition t_1 = [thenTranList  transitionAtIndex !0]
#       @automatonTransition t_2 = [thenTranList  transitionAtIndex !count]
#       t_2.target = t_1.source
#       [!?thenTransList settransitionAtIndex !t_2 !count]
       count++
#     end     
    end
    nodeList += thenNodList
    transitList += thenTransList
     
    count = 1
    for () in falseStatements do
     [statement statementToAutomaton !os ?nodList ?transList]
     elseNodList += nodList
     elseTransList += transList
     if count > 0 then
       @automatonTransition t_1 = [elseTransList  transitionAtIndex !count]
       @automatonTransition t_2 = [elseTransList  transitionAtIndex !count-1]
       t_2.target = t_1.source
       [!?elseTransList insertAtIndex !t_2 !count-1]
     end 
#     if count == [trueStatements length]
#       @automatonTransition t_1 = [elseTransList  transitionAtIndex !0]
#       @automatonTransition t_2 = [elseTransList  transitionAtIndex !count]
#       t_2.target = t_1.source
#       [!?elseTransList settransitionAtIndex !t_2 !count]
       count++
#     end     
    end
    nodeList += elseNodList
    transitList += elseTransList

    #Encore des lignes de codes à ajouter
}


override method @moveOutStatement statementToAutomaton
    ?let @os unused os
    !@automatonNodeList nodeList #nodeList
    !@automatonTransitionList transitList #transitList
{   

   nodeList = .emptyList
   transitList = .emptyList
   @string ident = [identifier string]
   @string nextStateString = [nextState string]
   @string locString = [loc line]
   @automatonNode null = @automatonNode.new{!""}
   @automatonNode nod = @automatonNode.new{!locString}
   @automatonTransition trans = @automatonTransition.new {!nod !null !" " !" "  !"[" + nextStateString + "]" + "<-" + ident}
   nodeList += !nod
   transitList += !trans

   #Encore des lignes de codes à ajouter

}

method @methodDeclaration methodToAutomaton
    ?let @os os
    ?!@automaton automaTon
{   
    @automatonTransitionList tList = .emptyList
    @automatonNodeList nList = .emptyList
    automaTon.name = [name string]
    for () in statements do 
      [statement statementToAutomaton !os ?nList ?tList]
      automaTon.nodeList += nList
      automaTon.transitionList += tList
    end
    #Encore du code à ajouter
}


method @schedulerDeclaration methodsToAutomatonList
    ?let @os os
    ?!@automatonList automaTonList
{
     @automaton automaT = @automaton.new{!"" !@automatonNode.new{!""} !.emptyList !.emptyList}
     for () in methods do
       [methodDeclaration methodToAutomaton !os !?automaT]
       automaTonList += !automaT
     end
     #Encore du code à ajouter
}



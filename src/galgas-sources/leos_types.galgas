abstract class @sdmlType {}
class @sdmlNone : @sdmlType {}
class @sdmlBasicType : @sdmlType {}
class @sdmlInteger : @sdmlBasicType {}
class @sdmlUnsigned : @sdmlBasicType {}
class @sdmlBool : @sdmlBasicType {}
class @sdmlTimer : @sdmlBasicType {}
class @sdmlList : @sdmlBasicType { @sdmlType listType }

class @sdmlCustom : @sdmlBasicType { @lstring name }

class @sdmlNormalTypeRef : @sdmlCustom {}
class @sdmlTaskRef : @sdmlCustom {}
class @sdmlCpuRef : @sdmlCustom {}

class @sdmlTaskContainer : @sdmlCustom {}
class @sdmlCpuContainer : @sdmlCustom {}

class @sdmlCollection : @sdmlCustom {}
class @sdmlTaskCollectionContainer : @sdmlCollection {}
class @sdmlCpuCollectionContainer : @sdmlCollection {}

#---------------------------------------------------------------------------*
# type comparison
#
getter @sdmlType isEqualTo
  ?let @sdmlType otherType
  ->@bool result
{
  result = [self dynamicType] == [otherType dynamicType]
}
  
override getter @sdmlTaskRef isEqualTo
  ?let @sdmlType otherType
  ->@bool result
{
  cast otherType
  case == @sdmlTaskRef t : result = name == [t name]
  else result = false
  end 
}

override getter @sdmlCpuRef isEqualTo
  ?let @sdmlType otherType
  ->@bool result
{
  cast otherType
  case == @sdmlCpuRef c : result = name == [c name]
  else result = false
  end 
}

override getter @sdmlTaskCollectionContainer isEqualTo
  ?let @sdmlType otherType
  ->@bool result
{
  cast otherType
  case == @sdmlTaskCollectionContainer t : result = name == [t name]
  else result = false
  end
}

override getter @sdmlCpuCollectionContainer isEqualTo
  ?let @sdmlType otherType
  ->@bool result
{
  cast otherType
  case == @sdmlCpuCollectionContainer c : result = name == [c name]
  else result = false
  end
}

#---------------------------------------------------------------------------*
# type containment
#
getter @sdmlType mayContain
  ?let @sdmlType otherType
  ->@bool result
{
  result = [self dynamicType] == [otherType dynamicType]
}
  
override getter @sdmlTaskContainer mayContain
  ?let @sdmlType otherType
  ->@bool result
{
  cast otherType
  case == @sdmlTaskRef t : result = name == [t name]
  else result = false
  end 
}

override getter @sdmlCpuContainer mayContain
  ?let @sdmlType otherType
  ->@bool result
{
  cast otherType
  case == @sdmlCpuRef c : result = name == [c name]
  else result = false
  end
}

override getter @sdmlTaskCollectionContainer mayContain
  ?let @sdmlType otherType
  ->@bool result
{
  cast otherType
  case == @sdmlTaskRef t : result = name == [t name]
  else result = false
  end 
}

override getter @sdmlCpuCollectionContainer mayContain
  ?let @sdmlType otherType
  ->@bool result
{
  cast otherType
  case == @sdmlCpuRef c : result = name == [c name]
  else result = false
  end 
}


#---------------------------------------------------------------------------*
# type information about ordering
#
getter @sdmlType isOrdered
  ->@bool result
{
  result = false
}

override getter @sdmlInteger isOrdered
  ->@bool result
{
  result = true
}

override getter @sdmlUnsigned isOrdered
  ->@bool result
{
  result = true
}



#---------------------------------------------------------------------------*
# textual typeName
#
abstract getter @sdmlType typeName
  ->@string
  
override getter @sdmlNone typeName
  ->@string result
{
  result = ""
}

override getter @sdmlBasicType typeName
  ->@string result
{
  error .here: "@sdmlBasicType has no type name" :result
}

override getter @sdmlCustom typeName
  ->@string result
{
  result = [name string]
}

override getter @sdmlInteger typeName
  ->@string result
{
  result = "int"
}

override getter @sdmlUnsigned typeName
  ->@string result
{
  result = "unsigned"
}

override getter @sdmlBool typeName
  ->@string result
{
  result = "bool"
}

override getter @sdmlTimer typeName
  ->@string result
{
  result = "timer"
}

#---------------------------------------------------------------------------*
# textual lTypeName
#
abstract getter @sdmlType lTypeName
  ->@lstring
  
override getter @sdmlNone lTypeName
  ->@lstring result
{
  result = emptylstring()
}

override getter @sdmlBasicType lTypeName
  ->@lstring result
{
  error .here: "@sdmlBasicType has no type name" :result
}

override getter @sdmlCustom lTypeName
  ->@lstring result
{
  result = name
}

override getter @sdmlInteger lTypeName
  ->@lstring result
{
  result = @lstring.new { !"int" !.here }
}

override getter @sdmlUnsigned lTypeName
  ->@lstring result
{
  result = @lstring.new { !"unsigned" !.here }
}

override getter @sdmlBool lTypeName
  ->@lstring result
{
  result = @lstring.new { !"bool" !.here }
}

override getter @sdmlTimer lTypeName
  ->@lstring result
{
  result = @lstring.new { !"timer" !.here }
}

#---------------------------------------------------------------------------*
# isCollection getter
#
getter @sdmlType isCollection
  ->@bool result
{
  result = false
}

override getter @sdmlCollection isCollection
  ->@bool result
{
  result = true
}

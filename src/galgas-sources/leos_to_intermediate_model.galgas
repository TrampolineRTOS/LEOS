#------------------------------------------------------------------------------#
#                Intermediate model generation from leos                       #      
#------------------------------------------------------------------------------#

class @intermediate_automatonNode {
  @string name 
}

class @intermediate_automatonTransition{
  @intermediate_automatonNode source 
  @intermediate_automatonNode target
  @statement statement 
}

class @intermediate_automaton {
  @string name
  @intermediate_automatonNode initNode
  @intermediate_automatonNodeList nodeList
  @intermediate_automatonTransitionList transitionList
}

class @nullStatement : @statement {@string null}

list @intermediate_automatonNodeList { 
  @intermediate_automatonNode node
}

list @intermediate_automatonTransitionList {
  @intermediate_automatonTransition transition %setter
}

List @intermediate_automatonList {
  @intermediate_automaton automaton
}

setter @intermediate_automatonTransition isetTransitionTarget #set a new target node to the related transition
   ?@intermediate_automatonNode Newnode
{
  target = Newnode
}

setter @intermediate_automatonTransition isetTransitionSource #set a new source node to the related transition
   ?@intermediate_automatonNode Newnode
{
  source = Newnode
}

getter @intermediate_automatonTransition igetTransitionTarget #get a the related transition target node
   ->@intermediate_automatonNode result
{
  result = target
}

getter @intermediate_automatonTransition igetTransitionSource #get a the related transition source node
   ->@intermediate_automatonNode result
{
  result = source
}

setter @intermediate_automaton addIntAutoNodeList #concatenate a new node list to the automaton node list
   ?@intermediate_automatonNodeList newNodeList
{
   nodeList += newNodeList
}

setter @intermediate_automaton addIntAutoTransList #concatenate a new transition list to the automaton transition list
   ?@intermediate_automatonTransitionList newTransList
{
   @uint64 transitionListLength = [transitionList length]
   if transitionListLength > 0 then 
      @intermediate_automatonTransition firstTransitionOfNewTransList
      @intermediate_automatonTransition lastTransitionOftransitionList
      [newTransList first ?firstTransitionOfNewTransList]
      [transitionList last ?lastTransitionOftransitionList]
      @intermediate_automatonNode sourceNode = [firstTransitionOfNewTransList igetTransitionSource]
      @intermediate_automatonNode TargetNode = [lastTransitionOftransitionList igetTransitionTarget]
      [!?lastTransitionOftransitionList isetTransitionTarget !sourceNode]
      [!?transitionList setTransitionAtIndex !lastTransitionOftransitionList !transitionListLength-1]
   end 
   transitionList += newTransList
}

getter @intermediate_automaton getAutomatonName # returns automaton name 
    -> @string result 
{
   result = name
}

setter @intermediate_automaton setAutomatonName #set a new name at the automaton
   ?@string newName 
{
   name = newName
} 

setter @intermediate_automaton addTransition #adds a new transition to the corresponding automaton
   ?@intermediate_automatonTransition transition 
{
   transitionList += !transition
}

method @statement statementToIntermediateAutomaton
    ?let @os unused os
    ?!@intermediate_automatonNodeList nodeList #nodeList
    ?!@intermediate_automatonTransitionList transitList #transitList
    ?!@intermediate_automatonNodeList unused linkEndIf
{ 
   nodeList = .emptyList
   transitList = .emptyList
#   @string column = [loc   column]
#   @string line = [loc  line]
#   @string locString = line + "_" + column  
   @string locString = [loc  line]
   @intermediate_automatonNode null = @intermediate_automatonNode.new{!""}
   @intermediate_automatonNode nod = @intermediate_automatonNode.new{!locString}  
   @intermediate_automatonTransition trans = @intermediate_automatonTransition.new {!nod !null  !self}
   nodeList += !nod
   transitList += !trans
}

override method @ifStatement statementToIntermediateAutomaton
    ?let @os os
    ?!@intermediate_automatonNodeList nodeList #nodeList
    ?!@intermediate_automatonTransitionList transitList #transitList
    ?!@intermediate_automatonNodeList linkEndIf 
{   
    @intermediate_automatonTransitionList thenTransList = .emptyList
    @intermediate_automatonTransitionList elseTransList = .emptyList
    @intermediate_automatonNodeList thenNodList = .emptyList
    @intermediate_automatonNodeList elseNodList = .emptyList
    @intermediate_automatonNodeList nodList = .emptyList
    @intermediate_automatonTransitionList transList = .emptyList

    nodeList = .emptyList
    transitList = .emptyList
    @sdmlExpression ifCondition = [condition sdmlExpression !os]
    @location ifLocation = [ifCondition getIfExprLocation]
    @string ifLocString = [ifLocation line]
#    @string ifColumn = [ifLocation   column]
#    @string ifLine = [ifLocation  line]
#    @string ifLocString = ifLine + "_" + ifColumn
    
    @string ifConditionString = [ifCondition objToString]
    @string endIfLocString = [loc line]
#    @string endIfColumn = [loc   column]
#    @string endIfLine = [loc  line]
#    @string endIfLocString = endIfLine + "_" + endIfColumn

    @intermediate_automatonNode null = @intermediate_automatonNode.new{!""}
    @intermediate_automatonNode ifNod = @intermediate_automatonNode.new{!ifLocString}
#    @intermediate_automatonNode elseifNod = @intermediate_automatonNode.new{!ifLocString+ifLocString}# a supprimer plus tard 
    @intermediate_automatonNode endIfNode = @intermediate_automatonNode.new{!endIfLocString}
    nodeList += !ifNod
    nodeList += !endIfNode
    linkEndIf += !endIfNode #this list in used to create transitions that link all endif states
    @intermediate_automatonTransition thenTrans = @intermediate_automatonTransition.new {!ifNod !null !self} # à compléter 
    thenTransList += !thenTrans
    @intermediate_automatonTransition elseTrans = @intermediate_automatonTransition.new {!ifNod !null !self} # à compléter
    elseTransList += !elseTrans
    
    for () in trueStatements do
     [statement statementToIntermediateAutomaton !os !?nodList !?transList !?linkEndIf]
     thenNodList += nodList
     thenTransList += transList
     [!?thenTransList ilinkStateTransition]
     @intermediate_automatonTransition lastTransition
     [!?thenTransList popLast ?lastTransition]
     @intermediate_automatonNode lastTransitionTarget = [lastTransition igetTransitionTarget]
     if lastTransitionTarget == null then 
       [!?lastTransition isetTransitionTarget !endIfNode]
     end     
     thenTransList += !lastTransition 
    end
    nodeList += thenNodList
    transitList += thenTransList
    
    @uint falseStatementsLength = [falseStatements length]
    if falseStatementsLength > 0 then 
       for () in falseStatements do
        [statement statementToIntermediateAutomaton !os !?nodList !?transList !?linkEndIf]
        elseNodList += nodList
        elseTransList += transList
        [!?elseTransList ilinkStateTransition]
        @intermediate_automatonTransition lastTransition
        [!?elseTransList popLast ?lastTransition]
        @intermediate_automatonNode lastTransitionTarget = [lastTransition igetTransitionTarget]
        if lastTransitionTarget == null then
          [!?lastTransition isetTransitionTarget !endIfNode]
        end 
        elseTransList += !lastTransition   
       end
    else 
       @intermediate_automatonTransition lastTransition
       [!?elseTransList popLast ?lastTransition]
       @intermediate_automatonNode lastTransitionTarget = [lastTransition igetTransitionTarget]
       if lastTransitionTarget == null then
         [!?lastTransition isetTransitionTarget !endIfNode]
       end 
       elseTransList += !lastTransition
    end 
#    log elseTransList
    nodeList += elseNodList
     transitList += elseTransList
}

method @methodDeclaration methodToIntermediateAutomaton
    ?let @os os
    ?!@intermediate_automaton automaTon
{   
    @location loca = @location.here
    @nullStatement null_statement = @nullStatement.new{!loca !"null"}
    @intermediate_automatonTransitionList tList = .emptyList
    @intermediate_automatonNodeList nList = .emptyList
    @intermediate_automatonTransitionList etList = .emptyList
    @intermediate_automatonNodeList endNodeList = .emptyList
    @intermediate_automaton automaT = @intermediate_automaton.new{!"" !@intermediate_automatonNode.new{!""} !.emptyList !.emptyList}
    automaTon = automaT
    [!?automaTon setAutomatonName ![name string]]
    for () in statements do 
      [statement statementToIntermediateAutomaton !os !?nList !?tList !?endNodeList]
      [!?automaTon addIntAutoNodeList !nList] #automaTon.nodeList += nList
      [!?automaTon addIntAutoTransList !tList] #automaTon.transitionList += tList
    end
    @uint endNodeListLength = [endNodeList length] 
    if endNodeListLength > 1 then 
       for i in @range.new{!0 !endNodeListLength-1} do 
         @intermediate_automatonNode source = [endNodeList nodeAtIndex !i+1] #end if node of the child if statement 
         @intermediate_automatonNode target = [endNodeList nodeAtIndex !i]# end if node of the parent if statement
         @intermediate_automatonTransition EndIfLinkTransition = @intermediate_automatonTransition.new{!source !target !null_statement}
         [!?automaTon addTransition !EndIfLinkTransition] #adds a new transition to automaTon
       end 
    end   
}

method @schedulerDeclaration methodsToIntermediateAutomatonList
    ?let @os os
    ?!@intermediate_automatonList automaTonList
{
     @intermediate_automaton automaT = @intermediate_automaton.new{!"" !@intermediate_automatonNode.new{!""} !.emptyList !.emptyList}
     for () in methods do
       [methodDeclaration methodToIntermediateAutomaton !os !?automaT]
       [!?automaT finalizeIntermediateAutomatonConstruction]
       automaTonList += !automaT
       [automaT automatonToGraphviz]
     end
}

#this function allows to link each automaton state and transition 

setter @intermediate_automatonTransitionList ilinkStateTransition
{
  @uint64 i = 0
  @uint64 transitionListLength = [self length]
  if transitionListLength > 0 then 
     for i in @range.new{!0 !transitionListLength-1} do 
        @intermediate_automatonTransition t_1 = [self  transitionAtIndex !i]
        @intermediate_automatonTransition t_2 = [self  transitionAtIndex !i+1]
        @intermediate_automatonNode sourceNode = [t_2 igetTransitionSource]
        @intermediate_automatonNode t_1Target = [t_1 igetTransitionTarget]
        @intermediate_automatonNode null = @intermediate_automatonNode.new{!""}
        if t_1Target == null then
          [!?t_1 isetTransitionTarget !sourceNode] # t_1.target = t_2.source
          [!?self setTransitionAtIndex !t_1 !i]
        end
     end 
  end 
}

#this setter finalizes the construction of the automaton

setter @intermediate_automaton finalizeIntermediateAutomatonConstruction #?! @automaton unused automaTon
{
  @location loca = @location.here
  @nullStatement null_statement = @nullStatement.new{!loca !"null"}

  @intermediate_automatonNode initialTransitionTarget
  [nodeList first ?initialTransitionTarget]

  initNode = @intermediate_automatonNode.new{!"initial_"+name}
  [!?nodeList insertAtIndex !initNode !0]
 
  @intermediate_automatonTransition initialTransition = @intermediate_automatonTransition.new{!initNode !initialTransitionTarget !null_statement}
  [!?transitionList insertAtIndex !initialTransition !0]

  @intermediate_automatonTransition finalTransition = @intermediate_automatonTransition.new{!initNode !initNode !null_statement}
# [!?transitionList insertAtIndex !finalTransition !0]
  
  @intermediate_automatonTransition lastTransition
  @uint64 transitionListLength = [transitionList length] 
  @intermediate_automatonNode endNode
  
  [transitionList last ?lastTransition]
  endNode = [lastTransition igetTransitionTarget] #lastTransition.target = initNode
  
  if endNode == @intermediate_automatonNode.new{!""} then 
     endNode = initNode #@automatonNode.new{!"endState"}
     [!?lastTransition isetTransitionTarget !endNode]
     [!?transitionList setTransitionAtIndex !lastTransition !transitionListLength-1] 
  else  
     [!?finalTransition isetTransitionSource !endNode]  
     [!?transitionList insertAtIndex !finalTransition !transitionListLength] 
  end
}


getter @intermediate_automatonNode getNodeName
   -> @string result 
{
   result = name
}

method @intermediate_automaton automatonToGraphviz
      
{
   @string nodeNames = ""
   for () in nodeList do 
      @string nodeName = [node getNodeName] + ";"
      nodeNames += nodeName
      between  nodeNames += "\n "
   end
   
   @string transitions = " \n"
   
   for () in transitionList do 
     @string transitionSource = [[transition igetTransitionSource] getNodeName]
     @string transitionTarget = [[transition igetTransitionTarget] getNodeName]
     @string transit = transitionSource + "->" + transitionTarget+ ";"
     transitions += transit
     between  transitions += "\n "
   end
   
   @string head = "digraph" + " " + name + " " + "{\n"
   @string foot = " \n}"
   
   @string graphvizAutomaton = head + nodeNames + transitions + foot 
   
   [graphvizAutomaton  writeToFile !"test.dot"]
   
}

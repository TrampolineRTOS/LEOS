proc leosGenerate
  ?let @gtlStruct cfg
{
  # Get the template directory
  @string templateDirectory = [option leos_options.template_dir value]
  templateDirectory = [templateDirectory unixPathWithNativePath]
  templateDirectory = [templateDirectory stringByStandardizingPath]
  if [templateDirectory directoryExists] then
    @gtlContext context = .new {
      !emptylstring()
      !""
      !templateDirectory
      !""
      !"leosTemplate"
      !.emptyList
      !.emptyList
      !true
      !defaultDebugSettings()
    }
    @library lib = emptyLib()
    @string  leosLog = invokeGTL (
      !@gtlString.new { 
          !.here 
          !lstring(!"root template filename") 
          ![option leos_options.root value]
       }
      !context
      !cfg
    )
  else
    error .here : "The template directory does not exist"
  end
}

getter @os configuration
  ->@gtlStruct config
{
  config = @gtlStruct.new { !.here !emptylstring() !.emptyMap }
  
  [!?config setStructField
    !@lstring.new { !"OS" !.here }
    !@gtlString.new { !.here !lstring(!"Name of the OS") !name }
  ]

  # 1 - the data type
  [!?config setStructField
    !@lstring.new { !"TYPES" !.here }
    ![typeDeclarations fieldMap]
  ]
  
  # 2 - the vars
  @gtlStruct globals = [varDeclarations fieldMap !typeDeclarations]
  [!?config setStructField
    !@lstring.new { !"VARIABLES" !.here }
    !globals
  ]
  
  # 3 - the scheduler, currently only one schedule is handled
  @gtlStruct schedulers = [schedulerDeclarations fieldMap !typeDeclarations]
  [!?config setStructField
    !@lstring.new { !"SCHEDULERS" !.here }
    !schedulers
  ]
  
  # - backends
  @gtlMap backends = .new { !.here !lstring(!"defined backends") !.emptyMap }
  for () in backendDeclarations do
    [backend configuration !?backends]
  end
  [!?config setStructField
    !@lstring.new { !"BACKENDS" !.here }
    !backends
  ]
}

getter @typeDeclarationMap fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  for () in self do
    [!?result setStructField
      !lkey
      ![type fieldMap !self]
    ]
  end
}

getter @schedulerDeclarationMap fieldMap
  ?let @typeDeclarationMap types
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  for () in self do
    [!?result setStructField
      !lkey
      ![scheduler fieldMap !types]
    ]
  end
}

getter @schedulerDeclaration fieldMap
  ?let @typeDeclarationMap types
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !@lstring.new { !"NAME" !.here }
    !@gtlString.new { !.here !emptylstring() !name }
  ]
  [!?result setStructField
    !@lstring.new { !"TASK" !.here }
    !@gtlString.new { !.here !emptylstring() !task }
  ]
  [!?result setStructField
    !@lstring.new { !"CPU" !.here }
    !@gtlString.new { !.here !emptylstring() !cpu }
  ]
  [!?result setStructField
    !@lstring.new { !"VARIABLES" !.here }
    ![locals fieldMap !types]
  ]
  [!?result setStructField
    !@lstring.new { !"METHODS" !.here }
    ![methods fieldMap !types]
  ]
}

getter @methodDeclarationMap fieldMap
  ?let @typeDeclarationMap types
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  for () in self do
    [!?result setStructField
      !lkey
      ![methodDeclaration fieldMap !types]
    ]
  end
}

getter @methodDeclaration fieldMap
  ?let @typeDeclarationMap types
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !@lstring.new { !"NAME" !.here }
    !@gtlString.new { !.here !emptylstring() !name }
  ]
  [!?result setStructField
    !@lstring.new { !"VARIABLES" !.here }
    ![locals fieldMap !types]
  ]
  [!?result setStructField
    !@lstring.new { !"STATEMENTS" !.here }
    ![statements fieldMapList]
  ]
}

abstract getter @typeDeclaration fieldMap
  ?let @typeDeclarationMap types
  ->@gtlStruct
  
method @typeDeclaration typeAndFields
  ?let @typeDeclarationMap types
  ?!@gtlStruct config
{
  [!?config setStructField
    !@lstring.new { !"NAME" !.here }
    !@gtlString.new { !.here !emptylstring() !name }
  ]
  [!?config setStructField
    !@lstring.new { !"FIELDS" !.here }
    ![fields fieldMap !types]
  ]
}

method @lstringmap configuration
  ?!@gtlStruct config
{
  @lstringset statesSet = .emptyMap 
  for () in self do
    [!?statesSet put
      !lkey
    ]
  end
  [!?config setStructField
    !@lstring.new { !"STATES" !.here }
    !@gtlSet.new { !.here !emptylstring() !statesSet }
  ]
}

override getter @taskDeclaration fieldMap
  ?let @typeDeclarationMap types
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [self typeAndFields !types !?result]
  [!?result setStructField
    !@lstring.new { !"FATHER" !.here }
    !@gtlString.new { !.here !emptylstring() !father }
  ]
  [!?result setStructField
    !@lstring.new { !"KIND" !.here }
    !@gtlString.new { !.here !emptylstring() !"TASK" }
  ]
  [states configuration !?result]
}

abstract method @acceptStatement acceptStatement ?!@gtlStruct st

override method @emptyAcceptStatement acceptStatement ?!@gtlStruct st
{
  [!?st setStructField
    !@lstring.new { !"CPUSTATE" !.here }
    !@gtlString.new { !.here !emptylstring() !cpuState }
  ]
}

override method @taskAcceptStatement acceptStatement ?!@gtlStruct st
{
  [!?st setStructField
    !@lstring.new { !"CPUSTATE" !.here }
    !@gtlString.new { !.here !emptylstring() !cpuState }
  ]
  [!?st setStructField
    !@lstring.new { !"TASKSTATE" !.here }
    !@gtlString.new { !.here !emptylstring() !taskState }
  ]
}

method @acceptMap configuration
  ?!@gtlStruct config
{
  @gtlStruct states = .new { !.here !emptylstring() !.emptyMap }
  for () in self do
    @gtlStruct st = .new { !.here !emptylstring() !.emptyMap }
    [accept acceptStatement !?st]
    [!?states setStructField
      ![accept cpuState]
      !st
    ]
  end
  [!?config setStructField
    !lstringwith(!"STATES")
    !states
  ]
}

override getter @cpuDeclaration fieldMap
  ?let @typeDeclarationMap types
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [self typeAndFields !types !?result]
  [!?result setStructField
    !lstringwith(!"TASK")
    !@gtlString.new { !.here !emptylstring() !task }
  ]
  [!?result setStructField
    !lstringwith(!"KIND")
    !@gtlString.new { !.here !emptylstring() !"CPU" }
  ]
  [states configuration !?result]
}
 
getter @varDeclarationMap fieldMap
  ?let @typeDeclarationMap types
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  for () in self do
    [!?result setStructField
      !lkey
      ![variable fieldMap !types]
    ]
  end
}

abstract getter @varDeclaration fieldMap
  ?let @typeDeclarationMap types
  ->@gtlStruct 
  
override getter @builtInVar fieldMap
  ?let @typeDeclarationMap unused types
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !lstringwith(!"NAME")
    !@gtlString.new { !.here !emptylstring() !name }
  ]
  [!?result setStructField
    !lstringwith(!"TYPE")
    !@gtlString.new { !.here !emptylstring() ![type typeName] }
  ]
}

override getter @sdmlContainerVar fieldMap
  ?let @typeDeclarationMap types
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [states configuration !?result]
  [ordering configuration !?result]
  [!?result setStructField
    !lstringwith(!"NAME")
    !@gtlString.new { !.here !emptylstring() !name }
  ]
  [!?result setStructField
    !lstringwith(!"TYPE")
    !@gtlString.new { !.here !emptylstring() ![type typeName] }
  ]
  if [type isCollection] then
    [!?result setStructField
      !lstringwith(!"QUEUE")
      !@gtlBool.new { !.here !emptylstring() !true }
    ]
  else
    [!?result setStructField
      !lstringwith(!"QUEUE")
      !@gtlBool.new { !.here !emptylstring() !false }
    ]
  end
  # lookup the type in types
  @typeDeclaration containerType
  [types getType ![type lTypeName] ?containerType]
  [!?result setStructField
    !lstringwith(!"REFTYPE")
    ![containerType fieldMap !types]
  ]
}

method @sdmlOrderingList configuration
  ?!@gtlStruct config
{
  @list order = .emptyList
  for () in self do
    @gtlStruct criterion = .new { !.here !emptylstring() !.emptyMap }
    [!?criterion setStructField
      !lstringwith(!"KEYS")
      ![key fieldMap]
    ]
    if up then
      [!?criterion setStructField
        !lstringwith(!"SORTING")
        !@gtlString.new { !.here !emptylstring() !"<" }
      ]
    else
      [!?criterion setStructField
        !lstringwith(!"SORTING")
        !@gtlString.new { !.here !emptylstring() !">" }
      ]
    end
    order += !criterion
  end
  [!?config setStructField
    !lstringwith(!"ORDERING")
    !@gtlList.new { !.here !emptylstring() !order }
  ]
}

method @backendDeclaration configuration
  ?!@gtlMap config
{
  @gtlStruct backAttributes = .new { !.here !emptylstring() !.emptyMap }
  [!?backAttributes setStructField
    !lstringwith(!"NAME")
    !@gtlString.new { !.here !emptylstring() !name }
  ]
  [!?backAttributes setStructField
    !lstringwith(!"ARGUMENTS")
    ![arguments fieldMapList]
  ]
  [!?backAttributes setStructField
    !lstringwith(!"HANDLERS")
    ![keyedStatements fieldMap]
  ]
  [!?backAttributes setStructField
    !lstringwith(!"IDENTIFIERS")
    ![keyedIdentifiers fieldMap]
  ]
  [!?config setMapItem
    !name
    !backAttributes
  ]
}

getter @argumentList fieldMapList
  ->@gtlList result
{
  @list resultList = .emptyList
  for () in self do
    @gtlStruct attrs = .new { !.here !emptylstring() !.emptyMap }
    [!?attrs setStructField
      !lstringwith(!"NAME")
      !@gtlString.new { !.here !emptylstring() !name }
    ]
    [!?attrs setStructField
      !lstringwith(!"TYPE")
      !@gtlString.new { !.here !emptylstring() ![type lTypeName] }
    ]
    resultList += !attrs
  end
  result = .new { !.here !emptylstring() !resultList }
}

getter @keyedStatementMap fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  for () in self do
    [!?result setStructField
      !lkey
      ![statements fieldMapList]
    ]
  end
}

getter @keyedIdentifierMap fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  for () in self do
    [!?result setStructField
      !lkey
      ![identifier fieldMapList]
    ]
  end
}

getter @statementList fieldMapList
  ->@gtlList result
{
  @list resultList = .emptyList
  for () in self do
    resultList += ![statement fieldMap]
  end
  result = .new { !.here !emptylstring() !resultList }
}

getter @statement fieldMap
  ->@gtlStruct result
{
  error .here : "fieldMap should not be called on this statement" : result
  message [self description]
}

override getter @sdmlAssignExpressionStatement fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"NAME" !loc }
    !@gtlString.new { !loc !emptylstring() !"ASSIGN" }
  ]
  [!?result setStructField
    !lstringwith(!"IDENTIFIER") 
    ![identifier fieldMapList]
  ]
  [!?result setStructField
    !lstringwith(!"EXP") 
    ![rightValue fieldMap]
  ]
#  @TfieldMapList ident := [identifier fieldMapList]
}

override getter @sdmlMoveStatement fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"NAME" !loc }
    !@gtlString.new { !loc !emptylstring() !"MOVE" }
  ]
  [!?result setStructField
    !lstringwith(!"SOURCE") 
    ![source fieldMapList]
  ]
  [!?result setStructField
    !lstringwith(!"DESTINATION") 
    ![destination fieldMap]
  ]
}

getter @lstringlist fieldMapList
  ->@gtlList result
{
  @list resultList = .emptyList
  for () in self do
    @gtlString item = .new { !.here !emptylstring() !mValue }
    resultList += !item
  end
  result = .new { !.here !emptylstring() !resultList }
}

abstract getter @migrationDestination fieldMap
  ->@gtlStruct

override getter @containerDestination fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"CONTAINER" }
  ]
  [!?result setStructField
    !.new { !"CONTAINER" !loc }
    ![container fieldMapList]
  ]
}

override getter @stateDestination fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"STATE" }
  ]
  [!?result setStructField
    !.new { !"STATE" !loc }
    !@gtlString.new { !loc !emptylstring() !taskState }
  ]
}

override getter @sdmlMethodStatement fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"NAME" !loc }
    !@gtlString.new { !loc !emptylstring() !"CALL" }
  ]
  [!?result setStructField
    !.new { !"METHOD" !loc }
    ![identifier fieldMapList]
  ]
  [!?result setStructField
    !.new { !"SCHEDULER" !loc }
    !@gtlString.new { !loc !emptylstring() !parentScheduler }
  ]
}

override getter @sdmlForeachStatement fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"NAME" !loc }
    !@gtlString.new { !loc !emptylstring() !"FOREACH" }
  ]
  [!?result setStructField
    !.new { !"ITEMS" !loc }
    ![iteration fieldMapList]
  ]
  [!?result setStructField
    !.new { !"STATEMENTS" !loc }
    ![statements fieldMapList]
  ]
}

override getter @sdmlMoveeacheachStatement fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"NAME" !loc }
    !@gtlString.new { !loc !emptylstring() !"MOVEEACH" }
  ]
  [!?result setStructField
    !.new { !"SRCITEM" !loc }
    ![srcItem fieldMapList]
  ]
  [!?result setStructField
    !.new { !"DSTITEM" !loc }
    !@gtlString.new { !loc !emptylstring() !dstItem }
  ]
  [!?result setStructField
    !.new { !"SRCCONTAINER" !loc }
    ![srcContainer fieldMapList]
  ]
  [!?result setStructField
    !.new { !"DSTCONTAINER" !loc }
    ![dstContainer fieldMapList]
  ]
  [!?result setStructField
    !.new { !"WHILECONDITION" ![whileCondition loc] }
    ![whileCondition fieldMap]
  ]
}

override getter @sdmlIfStatement fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"NAME" !loc }
    !@gtlString.new { !loc !emptylstring() !"IF" }
  ]
  [!?result setStructField
    !.new { !"CONDITION" ![condition loc] }
    ![condition fieldMap]
  ]
  [!?result setStructField
    !.new { !"TRUESTATEMENTS" !loc }
    ![trueStatements fieldMapList]
  ]
  [!?result setStructField
    !.new { !"FALSESTATEMENTS" !loc }
    ![falseStatements fieldMapList]
  ]
}

getter @sdmlItemAndContainerList fieldMapList
  ->@gtlList result
{
  @list resultList = .emptyList
  for () in self do
    @gtlStruct cont = .new { !.here !emptylstring() !.emptyMap }
    [!?cont setStructField
      !.new { !"ITEM" ![item location] }
      !@gtlString.new { ![item location] !emptylstring() !item }
    ]
    [!?cont setStructField
      !.new { !"CONTAINER" ![item location] }
      ![container fieldMapList]
    ]
    [!?cont setStructField
      !.new { !"WHERE" ![item location] }
      ![where fieldMap]
    ]
    resultList += !cont
  end
  result = .new { !.here !emptylstring() !resultList }
}

getter @sdmlExpressionList fieldMapList
  ->@gtlList result
{
  @list resultList = .emptyList
  for () in self do
    resultList += ![expr fieldMap]
  end
  result = .new { !.here !emptylstring() !resultList }
}

abstract getter @sdmlExpression fieldMap
  ->@gtlStruct

override getter @sdmlFunctionCallNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"FUNCTIONCALL" }
  ]
  [!?result setStructField
    !.new { !"NAME" !loc }
    !@gtlString.new { !loc !emptylstring() !funcName }
  ]
  [!?result setStructField
    !.new { !"ARGS" !loc }
    ![arguments fieldMapList]
  ]
}

override getter @sdmlIntegerNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"INTEGER" }
  ]
  [!?result setStructField
    !.new { !"VALUE" !loc }
    !@gtlInt.new { !loc !emptylstring() ![integerValue bigint] }
  ]
}

override getter @sdmlBoolNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"BOOL" }
  ]
  [!?result setStructField
    !.new { !"VALUE" !loc }
    !@gtlBool.new { !loc !emptylstring() !boolValue }
  ]
}

override getter @sdmlIdentifierNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"IDENTIFIER" }
  ]
  [!?result setStructField
    !.new { !"NAME" !loc }
    ![identifierValue fieldMapList]
  ]
}

override getter @sdmlMinNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"MIN" }
  ]
  [!?result setStructField
    !.new { !"CONTAINER" !loc }
    ![container fieldMapList]
  ]
}

override getter @sdmlMaxNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"MAX" }
  ]
  [!?result setStructField
    !.new { !"CONTAINER" !loc }
    ![container fieldMapList]
  ]
}

override getter @sdmlSubExprNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"SUBEXPRESSION" }
  ]
  [!?result setStructField
    !.new { !"EXP" !loc }
    ![expressionValue fieldMap]
  ]
}

override getter @sdmlNotNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"NOT" }
  ]
  [!?result setStructField
    !.new { !"EXP" !loc }
    ![expressionValue fieldMap]
  ]
}

override getter @sdmlCompNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"COMP" }
  ]
  [!?result setStructField
    !.new { !"EXP" !loc }
    ![expressionValue fieldMap]
  ]
}

method @sdmlBinNode setExpr
  ?!@gtlStruct result
{
  [!?result setStructField
    !.new { !"LEFT" !loc }
    ![left fieldMap]
  ]
  [!?result setStructField
    !.new { !"RIGHT" !loc }
    ![right fieldMap]
  ]
}

override getter @sdmlEqualNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"EQUAL" }
  ]
  [self setExpr !?result]
}

override getter @sdmlDifferNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"DIFFER" }
  ]
  [self setExpr !?result]
}

override getter @sdmlLowerEqualNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"LOWEROREQUAL" }
  ]
  [self setExpr !?result]
}

override getter @sdmlGreaterEqualNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"GREATEROREQUAL" }
  ]
  [self setExpr !?result]
}

override getter @sdmlLowerNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"LOWER" }
  ]
  [self setExpr !?result]
}

override getter @sdmlGreaterNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"GREATER" }
  ]
  [self setExpr !?result]
}

override getter @sdmlAndNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"AND" }
  ]
  [self setExpr !?result]
}

override getter @sdmlOrNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"OR" }
  ]
  [self setExpr !?result]
}

override getter @sdmlXorNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"XOR" }
  ]
  [self setExpr !?result]
}

override getter @sdmlShiftLeftNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"SHIFTLEFT" }
  ]
  [self setExpr !?result]
}

override getter @sdmlShiftRightNode fieldMap 
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"SHIFTRIGHT" }
  ]
  [self setExpr !?result]
}

override getter @sdmlAndAndNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"ANDAND" }
  ]
  [self setExpr !?result]
}

override getter @sdmlOrOrNode fieldMap 
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"OROR" }
  ]
  [self setExpr !?result]
}

override getter @sdmlAddNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"ADD" }
  ]
  [self setExpr !?result]
}

override getter @sdmlSubNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"SUB" }
  ]
  [self setExpr !?result]
}

override getter @sdmlMulNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"MUL" }
  ]
  [self setExpr !?result]
}

override getter @sdmlDivNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"DIV" }
  ]
  [self setExpr !?result]
}

override getter @sdmlRemainNode fieldMap
  ->@gtlStruct result
{
  result = .new { !.here !emptylstring() !.emptyMap }
  [!?result setStructField
    !.new { !"KIND" !loc }
    !@gtlString.new { !loc !emptylstring() !"REMAIN" }
  ]
  [self setExpr !?result]
}

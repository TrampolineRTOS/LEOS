#---------------------------------------------------------------------------*
# verify the root object
# 
getter @os verify -> @os result
{

  @typeDeclarationMap types = .emptyMap
  for () in typeDeclarations do
    @typeDeclaration verifiedType = [type verify !self]
    [!?types putType !lkey !verifiedType]
  end 
    
  @varDeclarationMap vars = .emptyMap
  for () in varDeclarations do
    @varDeclaration verifiedVar = [variable verify !self]
    [!?vars putData !lkey !verifiedVar]
  end
  
  @funcDeclarationMap funcs = .emptyMap
  for () in funcDeclarations do
    @funcDeclaration verifiedFunc = [function verify !self]
    [!?funcs putFunction !lkey !verifiedFunc]
  end 
    
  @schedulerDeclarationMap schedulers = .emptyMap
  for () in schedulerDeclarations do
    @schedulerDeclaration verifiedScheduler = [scheduler verify !self]
    [!?schedulers putScheduler !lkey !verifiedScheduler]
  end
  
  @transDeclarationMap trans = .emptyMap
  for () in transDeclarations do
    @transDeclaration verifiedTrans = [transition verify !self]
    [!?trans putTrans !lkey !verifiedTrans]
  end
  
  @backendDeclarationMap backends = .emptyMap
  for () in backendDeclarations do
    @backendDeclaration verifiedBackend = [backend verify !self]
    [!?backends putBackend !lkey !verifiedBackend]
  end

  result = @os.new { !name !types !vars !funcs !schedulers !trans !backends }
}

abstract getter @typeDeclaration verify
  ?let @os os
  ->@typeDeclaration
#---------------------------------------------------------------------------*
# verify the task declarations:
# - each task declaration should have an existing ancestor
# - each task state should not be redeclared
# - each task field should not be redeclared
#
override getter @taskDeclaration verify
  ?let @os os
  ->@typeDeclaration result
{
  # check the father exists
  if [[os typeDeclarations] hasLKey !father] then
    @typeDeclaration theFather
    [[os typeDeclarations] getTaskType !father ?theFather]
    cast theFather
    case == @taskDeclaration fatherTask :
      # check the states are not redefined compared to the ancestor
      for () in states do
        if [[fatherTask states] hasKey ![lkey string]] then
          error lkey: "state '" + lkey + "' of task " + name
          error [[fatherTask states] locationForKey ![lkey string]]: "conflicts with parent task state"
        end
      end
      # check the fields are not redefined compared to the ancestor
      for () in fields do
        if [[fatherTask fields] hasKey ![lkey string]] then
          error lkey: "field '" + lkey + "' of task " + name
          error [[fatherTask fields] locationForKey ![lkey string]]: "conflicts with parent task field"
        end
      end 
    else
      error father: "Father is not declared";
    end
  end
  result = self
}

#---------------------------------------------------------------------------*
# verify the cpu declaration
# - each cpu state must have a corresponding task state
# - empty must exist in 1 ex
#
override getter @cpuDeclaration verify
  ?let @os os
  ->@typeDeclaration result
{
  # get the task
  @typeDeclaration refobj
  [[os typeDeclarations] getTaskType !task ?refobj]
  cast refobj
  case == @taskDeclaration reftask :
    # verify each task state exists
    # iterate through the states of the CPU
    for () in states do
      cast accept
      case == @taskAcceptStatement tas :
        [[reftask allStates !os] getState ![tas taskState]]
      else end
    end
  else
    error task: [task string] + " is not a task type"
  end
  @lstringmap taskStates = .emptyMap
  @lstring lastEmpty = emptylstring()
  for () in states do    
    cast accept
    case == @taskAcceptStatement tas :
      [!?taskStates putState ![tas taskState]]
    case == @emptyAcceptStatement eas :
      if [lastEmpty string] != "" then
        error [eas cpuState]: "empty redefined"
        error lastEmpty: "was defined here"
      else
        lastEmpty = [eas cpuState]
      end
    else end
  end
  result = self
}

#---------------------------------------------------------------------------*
# vars verification
#
abstract getter @varDeclaration verify
  ?let@os os
  ->@varDeclaration

#---------------------------------------------------------------------------*
# verify a built in var, nothing to do in fact
#
override getter @builtInVar verify
  ?let @os unused os
  ->@varDeclaration result
{
  result = self
}

#---------------------------------------------------------------------------*
# verify a custom var
#
#---------------------------------------------------------------------------*
# methods to check the container states conform to the declared states
#
abstract method @typeDeclaration checkStates
  ?let @os os
  ?let @lstringmap containerStates;

override method @taskDeclaration checkStates
  ?let @os os
  ?let @lstringmap containerStates
{
  @lstringmap all = [self allStates !os]
  for () in containerStates do
    if not [all hasLKey !lkey] then
      error lkey: [lkey string] + " is not declared for task type " + name
    end
  end
}

override method @cpuDeclaration checkStates
  ?let @os unused os
  ?let @lstringmap containerStates
{
  for () in containerStates do
    if not [states hasLKey !lkey] then
      error lkey: [lkey string] + " is not declared for cpu type " + name
    end
  end
}
#---------------------------------------------------------------------------*
# methods to check the container ordering list
# conforms to the declared fields
#
getter @orderingList sdmlOrderingList
  ?let @os os
  ?let @varDeclarationMap fields
  ->@sdmlOrderingList sdmlOrdering
{
  #
  # build a variable map made with fields of the item type
  #
  @os osWithSortLocals = @os.new {
    ![os name]
    ![os typeDeclarations]
    !fields
    ![os funcDeclarations]
    ![os schedulerDeclarations]
    ![os transDeclarations]
    ![os backendDeclarations]
  }
  sdmlOrdering = @sdmlOrderingList.emptyList
  for () in self do
    @sdmlExpression sdmlKey = [key sdmlExpression !osWithSortLocals]
    if not [[sdmlKey type] isOrdered] then
      error [key loc]: "Sorting key is not ordered"
    end
    sdmlOrdering += !sdmlKey !up
  end
}

override getter @containerVar verify
  ?let @os os
  ->@varDeclaration result
{
  # look for the var type in the types
  @typeDeclaration typeDeclaration
  [[os typeDeclarations] getType ![type lTypeName] ?typeDeclaration]
  # check the states accepted by the container exists
  [typeDeclaration checkStates !os !states]
  # check the ordering list conforms to the declared fields
  @sdmlOrderingList sdmlOrdering = [ordering sdmlOrderingList !os ![typeDeclaration allFields !os]]
  result = @sdmlContainerVar.new { !name !type !access !states !sdmlOrdering }
}

#---------------------------------------------------------------------------*
# verify a method
# verify each statement
#
getter @methodDeclaration verify
  ?let @os os
  ?let @lstring parent
  ->@methodDeclaration result
{
#  message "**** Parent = ".parent."\n";
  @statementList verifiedStatements = .emptyList
  @varDeclarationMap localMap = @varDeclarationMap.mapWithMapToOverride { ![os varDeclarations] }
  for () in locals do
    [!?localMap putData !lkey !variable];
  end
  @os osWithLocals = @os.new { 
    ![os name]
    ![os typeDeclarations]
    !localMap
    ![os funcDeclarations]
    ![os schedulerDeclarations]
    ![os transDeclarations]
    ![os backendDeclarations]
  }
  for () in statements do
    verifiedStatements += ![statement sdmlStatement !osWithLocals !parent]
  end
  result = @methodDeclaration.new { !name !locals !verifiedStatements }
}

#---------------------------------------------------------------------------*
# verify a scheduler
#
getter @schedulerDeclaration verify
  ?let @os os
  ->@schedulerDeclaration result
{
  @varDeclarationMap decls = @varDeclarationMap.mapWithMapToOverride { ![os varDeclarations] }
  for () in locals do
    @varDeclaration dec = [variable verify !os]
    [!?decls putData !lkey !dec]
  end
  
  @os osWithLocals = @os.new { 
    ![os name]
    ![os typeDeclarations]
    !decls
    ![os funcDeclarations]
    ![os schedulerDeclarations]
    ![os transDeclarations]
    ![os backendDeclarations]
  }
  @methodDeclarationMap verifMethods = .emptyMap
  for () in methods do
    @methodDeclaration verifiedMethod = [methodDeclaration verify !osWithLocals !name]
    [!?verifMethods putMethod !lkey !verifiedMethod]
  end
  result = @schedulerDeclaration.new { !name !task !cpu !decls !verifMethods }
}

#---------------------------------------------------------------------------*
# verify a transition set
#
method @taskDeclaration hasState ?let @lstring inState ?let @os os
{
  @lstringmap allStates = [self allStates !os]
  if not [allStates hasLKey !inState] then
    error inState: "State " + inState + " does not exist"
  end
}

getter @transDeclaration verify
  ?let @os os
  ->@transDeclaration result
{
  # check the taskType is ok
  @typeDeclaration taskTypeDeclaration
  [[os typeDeclarations] getTaskType !taskType ?taskTypeDeclaration]
  cast taskTypeDeclaration
  case == @taskDeclaration td :
    @varDeclaration task = @refVar.new { !taskName !@sdmlCustom.new { !taskType } !rwAccess() }
    @varDeclarationMap localMap = @varDeclarationMap.mapWithMapToOverride { ![os varDeclarations] }
    [!?localMap putData !taskName !task]
    @transitionList verifiedTransitions = .emptyList
    @os osWithLocals = @os.new {
      ![os name]
      ![os typeDeclarations]
      !localMap
      ![os funcDeclarations]
      ![os schedulerDeclarations]
      ![os transDeclarations]
      ![os backendDeclarations]
    }
    for () in transitions do
      # check the states exist
      [td hasState !sourceState !osWithLocals]
      [td hasState !destinationState !osWithLocals]
      @statementList verifiedList = .emptyList
      for () in statements do
        @sdmlStatement verifiedStatement = [statement sdmlStatement !osWithLocals !emptylstring()]
        verifiedList += !verifiedStatement
      end
      verifiedTransitions += !sourceState !destinationState !verifiedList
    end
    result = @transDeclaration.new { !name !taskType !taskName !verifiedTransitions }
  else
    error taskType: "Task type expected": result
  end
}

#---------------------------------------------------------------------------*
# verify a function declaration
#
getter @funcDeclaration verify
  ?let @os os
  ->@funcDeclaration result
{
  # build a variable map with the arguments, the local variables and the function name
  @varDeclarationMap localVariables = locals
  for () in arguments do
    @varDeclaration arg = @builtInVar.new { !name !type !rwAccess() }
    [!?localVariables putData !name !arg]
  end
  
  # result variable of the function has the name of the function
  [!?localVariables putData !name !@builtInVar.new { !name !type !rwAccess() } ]
  
  # verify the statements of the function
  @os osWithLocals = @os.new {
    ![os name]
    ![os typeDeclarations]
    !localVariables
    ![os funcDeclarations]
    ![os schedulerDeclarations]
    ![os transDeclarations]
    ![os backendDeclarations]
  }
  @statementList verifiedStatements = .emptyList
  for () in statements do
    @sdmlStatement verifiedStatement = [statement sdmlStatement !osWithLocals !emptylstring()]
  end 
  
  result = @funcDeclaration.new { !name !type !arguments !locals !verifiedStatements }
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
getter @backendDeclaration verify
  ?let @os os
  ->@backendDeclaration result
{
  @varDeclarationMap localVariables = @varDeclarationMap.mapWithMapToOverride { ![os varDeclarations] }
  for () in arguments do
#    log type;
    @varDeclaration arg = [type create !name ![os typeDeclarations]]
    [!?localVariables putData !name !arg]
  end
  
  @keyedStatementMap verifiedKeyedStatements = .emptyMap
  @os osWithLocals = @os.new { 
    ![os name]
    ![os typeDeclarations]
    !localVariables
    ![os funcDeclarations]
    ![os schedulerDeclarations]
    ![os transDeclarations]
    ![os backendDeclarations]
  }
  for () in keyedStatements do
    @statementList verifiedStatements = .emptyList
    for () in statements do
      @statement verifiedStatement = [statement sdmlStatement !osWithLocals !emptylstring()]
      verifiedStatements += !verifiedStatement
    end
    [!?verifiedKeyedStatements putStatements !lkey !verifiedStatements]
  end
  
  for () in keyedIdentifiers do
    @sdmlType identType = [[osWithLocals varDeclarations] identifierType !identifier !osWithLocals]
  end
  
  result = @backendDeclaration.new { !name !arguments !verifiedKeyedStatements !keyedIdentifiers }
}

#-----------------------------------------------------------------------------
# Create a variable of the corresponding type
#-----------------------------------------------------------------------------
getter @sdmlType create
  ?let @lstring varName
  ?let @typeDeclarationMap unused types
  ->@varDeclaration variable
{
  error varName: "cannot create a variable of this type": variable;
}
  
override getter @sdmlBasicType create
  ?let @lstring varName
  ?let @typeDeclarationMap unused types
  ->@varDeclaration variable
{
  variable = @builtInVar.new { !varName !self !rwAccess() }
}

override getter @sdmlCustom create
  ?let @lstring varName
  ?let @typeDeclarationMap types
  ->@varDeclaration variable
{
  @typeDeclaration declaration
  [types getTaskType !name ?declaration]
  cast declaration
  case == @taskDeclaration :
    variable = @refVar.new { !varName !@sdmlTaskRef.new { !name } !rwAccess() }
  case == @cpuDeclaration :
    variable = @refVar.new { !varName !@sdmlCpuRef.new { !name } !rwAccess() }
  else
    error varName: "unexpected type":variable;
  end
}

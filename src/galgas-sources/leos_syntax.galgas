syntax leos_syntax (leos_lexique) {

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <expression> !@expression expr
rule <expression_list> !@expressionList expList

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <start_symbol> !@os os {
  @typeDeclarationMap typeDeclarations = {}
  @varDeclarationMap varDeclarations = {}
  @schedulerDeclarationMap schedulerDeclarations = {}
  @transDeclarationMap transDeclarations = {}
  @funcDeclarationMap funcDeclarations = {}
  @backendDeclarationMap backendDeclarations = {}
  
  $os$ $identifier$ ?let @lstring osName ${$
  repeat
  while <taskType_declaration> !?typeDeclarations
  while <cpuType_declaration> !?typeDeclarations
  while <var_declaration> !?varDeclarations
  while <scheduler_declaration> !?schedulerDeclarations
  while <trans_declaration> !?transDeclarations
  while <function_declaration> !?funcDeclarations
  while <backend_declaration> !?backendDeclarations
  end
  $}$
    
  os = @os.new {
          !osName
          !typeDeclarations
          !varDeclarations
          !funcDeclarations
          !schedulerDeclarations
          !transDeclarations
          !backendDeclarations }
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <taskType_declaration>
  ?!@typeDeclarationMap declarations
{
  @lstring taskTypeName
  @lstringmap states = {}
  @varDeclarationMap fields = {}
  @lstring ancestor
  
  $task$ $identifier$ ?taskTypeName <state_list> ?states
  select
    $extends$ $identifier$ ?ancestor
  or
    ancestor = emptylstring()
  end
  select
    ${$
    repeat
    while <var_declaration> !?fields
    end
    $}$
  or 
  end
  #
  # Allowed transition and associated code
  #
  <allowed_transitions> ?@transitionList transitions

  @taskDeclaration task = @taskDeclaration.new {!taskTypeName !fields !transitions !ancestor !states}
  [!?declarations putTaskType !taskTypeName !task]
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <cpuType_declaration>
  ?!@typeDeclarationMap declarations
{
  $cpu$ $identifier$ ?let @lstring cpuTypeName
  $with$ $identifier$ ?let @lstring taskName
  <cpu_state_list> ?@acceptMap states
  @varDeclarationMap fields = {}
  # compute the attributes of the running field
  # this field is a scalar
  # it accepts all the corresponding task states defined in the cpu states
  @lstringmap acceptedStates = {}
  for () in states do
    cast accept
    case == @taskAcceptStatement tas :
      [!?acceptedStates putState ![tas taskState]]
    else end 
  end
  [!?fields putData
    !lstringwith(!"running")
    !@sdmlContainerVar.new {!lstringwith(!"running") !@sdmlTaskContainer.new {!taskName } !rwAccess() !acceptedStates !@sdmlOrderingList.emptyList }
  ]
  select
    ${$
    repeat
    while <var_declaration> !?fields
    end
    $}$
  or 
  end
  <allowed_transitions> ?@transitionList transitions
  @cpuDeclaration cpu = @cpuDeclaration.new {!cpuTypeName !fields !transitions !taskName !states}
  [!?declarations putCpuType !cpuTypeName !cpu]
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <allowed_transitions> !@transitionList allowed{
  $($
  allowed = @transitionList.emptyList
  repeat
    $identifier$ ?let @lstring source
    $->$
    $identifier$ ?let @lstring destination
    @statementList statements = @statementList.emptyList
    select
      <statement_list> ?statements
    or 
    end
    allowed += !source !destination !statements
  while
    $,$
  end
  $)$
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <static_type> !@sdmlType type{
  select
    $int$ type = @sdmlInteger.new{}
  or
    $unsigned$ type = @sdmlUnsigned.new{}
  or
    $bool$ type = @sdmlBool.new{}
  or
    $identifier$ ?let @lstring typeName type = @sdmlCustom.new {!typeName}
  end
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <function_declaration> ?!@funcDeclarationMap declarations{
  $function$
  <static_type> ?let @sdmlType functionType
  $identifier$ ?let @lstring functionName
  $($
  <argument_list> ?@argumentList arguments
  $)$
  <declaration_list> ?@varDeclarationMap functionLocals
  <statement_list> ?@statementList statements
  @funcDeclaration function = @funcDeclaration.new {!functionName !functionType !arguments !functionLocals !statements}
  [!?declarations putFunction !functionName !function]
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <argument_list> !@argumentList arguments{
  arguments = @argumentList.emptyList
  repeat
    <static_type> ?@sdmlType type
    $identifier$ ?let @lstring name
    arguments += !name !type
  while $,$
  end
}


#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <local_var_declaration> ?!@varDeclarationMap declarations
{
  select
    $int$ $identifier$ ?let @lstring varName <access_right> ?let @accessRight access
    [!?declarations putData !varName !@builtInVar.new {!varName !@sdmlInteger.new !access } ]
  or
    $unsigned$ $identifier$ ?let @lstring varName <access_right> ?@accessRight access
    [!?declarations putData !varName !@builtInVar.new {!varName !@sdmlUnsigned.new !access } ]
  or
    $bool$ $identifier$ ?let @lstring varName <access_right> ?@accessRight access
    [!?declarations putData !varName !@builtInVar.new {!varName !@sdmlBool.new !access } ]
  end
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <var_declaration> ?!@varDeclarationMap declarations{
  select
    <local_var_declaration> !?declarations
  or
    $timer$ $identifier$ ?let @lstring varName
    [!?declarations putData !varName !@builtInVar.new {!varName !@sdmlTimer.new{} !rwAccess()}]
  or
    <container_declaration> !?declarations
  end
  $;$
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <container_declaration> ?!@varDeclarationMap declarations{
    $container$
    $identifier$ ?let @lstring typeName
    @lstringmap states = {}
    @orderingList ordering = .emptyList
    @sdmlType type
    select
      $queue$
      type = @sdmlCollection.new {!typeName}
    or
      type = @sdmlCustom.new {!typeName}    
    end
    $identifier$ ?let @lstring varName
    select
      <state_list> ?states
    or
    end
    select
      $sorted$ $by$ <ordering_list> ?ordering
      if [type dynamicType] == `@sdmlCustom then
        error .here: "ordering is invalid for scalar containers"
      end
    or 
    end
    [!?declarations putData !varName !@containerVar.new {!varName !type !rwAccess() !states !ordering}]
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <trans_declaration> ?!@transDeclarationMap declarations{
  $transitions$ $identifier$ ?let @lstring transName $($
  $identifier$ ?let @lstring taskType
  $identifier$ ?let @lstring taskName
  $)$ ${$
  @transitionList transitions = .emptyList
  repeat
  while
    $identifier$ ?let @lstring source
    $->$
    $identifier$ ?let @lstring destination
    <statement_list> ?@statementList statements
    transitions += !source !destination !statements
  end
  [!?declarations putTrans !transName !@transDeclaration.new {!transName !taskType !taskName !transitions}]
  $}$
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <state_list>
  !@lstringmap states
{
  $[$
  states = @lstringmap.emptyMap
  repeat
    $identifier$ ?let @lstring stateName
    [!?states putState !stateName]
  while
    $,$
  end
  $]$
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <cpu_state_list>
  !@acceptMap states
{
  $[$
  states = @acceptMap.emptyMap
  repeat
    @acceptStatement accept
    $identifier$ ?let @lstring cpuStateName
    $:$
    select
      $task$ $in$ $identifier$ ?let @lstring taskStateName
      accept = @taskAcceptStatement.new {!cpuStateName !taskStateName}
    or
      $empty$
      accept = @emptyAcceptStatement.new {!cpuStateName}
    end
    [!?states putState !cpuStateName !accept]
  while
    $,$
  end
  $]$
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <scheduler_declaration>
  ?!@schedulerDeclarationMap declarations
{
  $scheduler$ $identifier$ ?let @lstring schedulerName
  $with$ $identifier$ ?let @lstring task
  $on$ $identifier$ ?let @lstring cpu
  ${$
  @varDeclarationMap locals = .emptyMap
  @methodDeclarationMap methods = .emptyMap
  repeat
  while
    $method$ $identifier$ ?let @lstring methodName
    <declaration_list> ?@varDeclarationMap methodLocals
    <statement_list> ?@statementList statements
    [!?methods putMethod !methodName !@methodDeclaration.new {!methodName !methodLocals !statements}]
  while
    $init$ @lstring methodName = @lstring.new {!"init" !.here}
    <declaration_list> ?@varDeclarationMap methodLocals
    <statement_list> ?@statementList statements
    [!?methods putMethod !methodName !@methodDeclaration.new {!methodName !methodLocals !statements}]
  while
    <var_declaration> !?locals
  end
  $}$
  [!?declarations putScheduler !schedulerName !@schedulerDeclaration.new {!schedulerName !task !cpu !locals !methods}]
}
  
#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <backend_declaration> ?!@backendDeclarationMap declarations{
  $backend$
  $identifier$ ?let @lstring backendName
  $($
  <argument_list> ?@argumentList arguments
  $)$
  ${$
  @keyedStatementMap keyStatements = .emptyMap
  @keyedIdentifierMap keyIdentifier = .emptyMap
  repeat
    $identifier$ ?let @lstring key
    select
      <statement_list> ?@statementList statements
      [!?keyStatements putStatements !key !statements];
    or
      $for$
      <full_identifier> ?@lstringlist identifier
      [!?keyIdentifier putIdentifier !key !identifier]
    end
  while end
  $}$
  @backendDeclaration backend = @backendDeclaration.new {!backendName !arguments !keyStatements !keyIdentifier}
  [!?declarations putBackend !backendName !backend]
#  message "Backend ".backendName." added\n";
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <condition>
  !@expression expr
{
  $($
  <expression> ?expr
  $)$
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <declaration_list> !@varDeclarationMap vars{
  vars = @varDeclarationMap.emptyMap
  repeat while
    <local_var_declaration> !?vars
    $;$
  end
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <statement_list> !@statementList code{
  code = @statementList.emptyList
  ${$
  repeat
  while
    @statement statement
    <statement> ?statement
    code += !statement
  end
  $}$
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <ordering_list>
  !@orderingList ordering
{
  ordering = @orderingList.emptyList
  repeat
    <expression> ?@expression key $:$
    @bool up
    select
      $<$ up = true
    or
      $>$ up = false
    end
    ordering += !key !up
  while
    $,$
  end
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <statement> !@statement statement{
  @lstringlist identifier
  <full_identifier> ?identifier
  select
    @lstring funcName
    if [identifier length] > 1 then
      error .here: "function name expected": funcName
    else
      [identifier first ?funcName]
    end
    $($ 
    @expressionList expList = .emptyList
    select <expression_list> ?expList or end
    $)$ # function call
    statement = @functionCallStatement.new {!.here !funcName !expList}
  or
    <assignment> !identifier ?statement
  end
  $;$
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <statement> !@statement statement{
  $move$
  select
    $each$
    <full_identifier> ?@lstringlist sourceItem
    $in$
    <full_identifier> ?@lstringlist sourceContainer
    $to$
    select
      $each$
      $identifier$ ?let @lstring destItem
      $in$
      <full_identifier> ?@lstringlist destContainer
      @expression condition
      select
        $while$
        <expression> ?condition
      or
        condition = @boolNode.new {!.here !@lbool.new {!true !.here}}
      end
      statement = @moveeacheachStatement.new {!.here !sourceItem !sourceContainer !destItem !destContainer !condition}
    or   
      <move_destination> ?@migrationDestination destination
      @expression condition
      select
        $while$
        <expression> ?condition
      or
        condition = @boolNode.new {!.here !@lbool.new {!true !.here}}
      end
      statement = @moveeachStatement.new {!.here !sourceItem !sourceContainer !destination !condition}
    end
  or
    <full_identifier> ?@lstringlist sourceContainer
    $to$
    <move_destination> ?@migrationDestination destination
    statement = @moveStatement.new {!.here !sourceContainer !destination}
  end
  $;$
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <move_destination> !@migrationDestination destination{
  select
    $[$
    @lstring finalState = emptylstring()
    select
      $identifier$ ?finalState
    or end
    $]$
    destination = @stateDestination.new {!.here !finalState}
  or
    <full_identifier> ?@lstringlist identifier
    @lbool position
    select
      $front$ position = @lbool.new {!true !.here}
    or
      $back$ position = @lbool.new {!false !.here}
    or
      position = @lbool.new {!false !.here}
    end
    destination = @containerDestination.new {!.here !identifier !position}
  end
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <statement> !@statement statement{
  $if$ <condition> ?@expression cond
  <statement_list> ?@statementList trueStatements
  @statementList falseStatements = .emptyList
  select
    $else$
    <statement_list> ?falseStatements
  or end
  statement = @ifStatement.new {!.here !cond !trueStatements !falseStatements}
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <statement> !@statement statement{
  $start$
  @bool periodic = false
  select $periodic$ periodic = true or end
  <full_identifier> ?@lstringlist timer
  @lstringlist methodName = .emptyList
  select $with$ <full_identifier> ?methodName or end
  $for$
  <expression> ?@expression delay
  $;$
  statement = @startStatement.new {!.here !timer !delay !periodic !methodName}
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <statement> !@statement statement{
  $for$ $each$
  <iteration_list> ?@itemAndContainerList iteration
  <statement_list> ?@statementList statements
  statement = @foreachStatement.new {!.here !iteration !statements}
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <iteration_list> !@itemAndContainerList iteration{
  iteration = @itemAndContainerList.emptyList
  repeat
    $identifier$ ?let @lstring item
    $in$
    <full_identifier> ?@lstringlist container
    @expression where
    select
      $where$
      <expression> ?where
    or
      where = @boolNode.new {!.here !@lbool.new {!true !.here}}
    end
    iteration += !item !container !where
  while
    $,$
  end
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <statement> !@statement statement{
  $call$
  <full_identifier> ?@lstringlist fullMethod
  $;$
  statement = @methodStatement.new {!.here !fullMethod}
}

#rule <type> !@exprType type:
#  select
#    $int$; type := [@exprType integerType];
#  or
#    $unsigned$; type := [@exprType unsignedType];
#  end select;
#end rule;

#rule <container_migration> ?@migrationDestination destination !@statement statement:
#  $<-$;
#end rule;

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <full_identifier> !@lstringlist identifier{
  identifier = @lstringlist.emptyList
  repeat
    @lstring ident
    $identifier$ ?ident
    identifier += !ident
  while
    $.$
  end
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <assignment> ?@lstringlist identifier !@statement statement{
  select
    $=$ @expression expr
    <expression> ?expr statement = @assignExpressionStatement.new {!.here !identifier !expr}
  or
    $+=$ @expression expr
    <expression> ?expr statement = @assignAddStatement.new {!.here !identifier !expr}
  or
    $-=$ @expression expr
    <expression> ?expr statement = @assignSubStatement.new {!.here !identifier !expr}
  or
    $*=$ @expression expr
    <expression> ?expr statement = @assignMulStatement.new {!.here !identifier !expr}
  or
    $/=$ @expression expr
    <expression> ?expr statement = @assignDivStatement.new {!.here !identifier !expr}
  or
    $%=$ @expression expr
    <expression> ?expr statement = @assignRemainStatement.new {!.here !identifier !expr}
  or
    $&=$ @expression expr
    <expression> ?expr statement = @assignAndStatement.new {!.here !identifier !expr}
  or
    $|=$ @expression expr
    <expression> ?expr statement = @assignOrStatement.new {!.here !identifier !expr}
  or
    $<<=$ @expression expr
    <expression> ?expr statement = @assignShiftLeftStatement.new {!.here !identifier !expr}
  or
    $>>=$ @expression expr
    <expression> ?expr statement = @assignShiftRightStatement.new {!.here !identifier !expr}
  or
    $++$ statement = @assignIncStatement.new {!.here !identifier}
  or
    $--$ statement = @assignDecStatement.new {!.here !identifier}
  end
}

#-----------------------------------------------------------------------------
# 
#-----------------------------------------------------------------------------
rule <access_right> !@accessRight access{
  $($
  $identifier$ ?let @lstring accessLString
  @bool constant = false
  @bool read = false
  @bool write = false
  @string accessString = [accessLString string]
  @uint i = 0
  loop ([accessString length])
  while i < [accessString length] do
    @char curCar = [accessString characterAtIndex !i]
    if curCar == 'r' then
      read = true
    elsif curCar == 'w' then
      write = true
    elsif curCar == 'c' then
      constant = true
    else
      error .here: " '"+ curCar +"' is not a valid access right"
    end
    i = i + 1
  end
  if write & constant then
    error .here: "'w' and 'c' are incompatible access rights"
  end
  $)$
  access = @accessRight.new {![accessLString location] !read !write !constant}
}
}

#--- Prologue routine
before {
}

#--- 'when' clauses
case . "leos"
message "a source text file with the .leos extension" ?sourceFilePath:@lstring inSourceFile
{
  @os os
  grammar leos_grammar in inSourceFile ?os
#  log os

################################################################################
  @schedulerDeclarationMap schedMap = [os schedulerDeclarations]
  @schedulerDeclaration sched
  @automatonList autList = .emptyList
  @intermediate_automatonList iautList = .emptyList
#  log schedMap
  @lstring key = .new {!"fixed_priority" !.here} 
  [schedMap getScheduler !key ?sched]
#  log sched
#  [sched methodsToAutomatonList !os !?autList]
#  @automaton aut = [autList automatonAtIndex !7]
#  log aut
  
  [sched methodsToIntermediateAutomatonList !os !?iautList]
  @intermediate_automaton iaut = [iautList automatonAtIndex !6]
  log iaut
  
################################################################################
  os = [os verify]
  
  
  if not [option leos_options.dryrun value] then
    @gtlStruct configuration = [os configuration]
    leosGenerate(!configuration)
  #  log configuration; 
    
#    addStringValue !?configuration !lstringwith[!"BACKEND"] ![option sdml_options.backend value];
  
#    @string result := computeTemplate(!"" !configuration !"root");
  end
}

case . "leosTemplate"
message "A LEOS template file"
   ?sourceFilePath:@lstring unused inSourceFile
{
}

#--- Epilogue routine
after {
}

#---

